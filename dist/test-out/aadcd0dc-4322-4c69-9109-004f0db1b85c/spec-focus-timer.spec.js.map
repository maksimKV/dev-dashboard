{
  "version": 3,
  "sources": ["src/app/features/timer/focus-timer/focus-timer.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { FocusTimer } from './focus-timer';\r\nimport { AuthService } from '../../../shared/services/auth.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\ndescribe('FocusTimer', () => {\r\n  let component: FocusTimer;\r\n  let fixture: ComponentFixture<FocusTimer>;\r\n  let authServiceSpy: jasmine.SpyObj<AuthService>;\r\n  let cdrSpy: jasmine.SpyObj<ChangeDetectorRef>;\r\n\r\n  beforeEach(async () => {\r\n    authServiceSpy = {\r\n      updateFocusTimer: jasmine.createSpy('updateFocusTimer').and.returnValue(of({})),\r\n      getUserData: jasmine.createSpy('getUserData').and.returnValue(of({ focusTimer: {} }))\r\n    } as any;\r\n    cdrSpy = jasmine.createSpyObj('ChangeDetectorRef', ['markForCheck', 'detectChanges']);\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        FocusTimer,\r\n        CommonModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatIconModule\r\n      ],\r\n      providers: [\r\n        { provide: AuthService, useValue: authServiceSpy },\r\n        { provide: ChangeDetectorRef, useValue: cdrSpy },\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(FocusTimer);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should start and pause the timer', () => {\r\n    spyOn(window, 'setInterval').and.callFake((fn: any) => { fn(); return 1 as any; });\r\n    spyOn(window, 'clearInterval');\r\n    component.timeLeft = 2;\r\n    component.isWork = true;\r\n    component.isRunning = false;\r\n    component.start();\r\n    expect(component.isRunning).toBeTrue();\r\n    component.pause();\r\n    expect(component.isRunning).toBeFalse();\r\n    expect(window.clearInterval).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should reset the timer', () => {\r\n    spyOn(window, 'clearInterval');\r\n    component.isWork = true;\r\n    component.workDuration = 10;\r\n    component.breakDuration = 5;\r\n    component.timeLeft = 1;\r\n    component.isRunning = true;\r\n    component.reset();\r\n    expect(component.isRunning).toBeFalse();\r\n    expect(component.timeLeft).toBe(600);\r\n    component.isWork = false;\r\n    component.reset();\r\n    expect(component.timeLeft).toBe(300);\r\n  });\r\n\r\n  it('should update durations', () => {\r\n    component.isWork = true;\r\n    component.workDuration = 15;\r\n    component.updateDurations();\r\n    expect(component.timeLeft).toBe(900);\r\n    component.isWork = false;\r\n    component.breakDuration = 7;\r\n    component.updateDurations();\r\n    expect(component.timeLeft).toBe(420);\r\n  });\r\n\r\n  it('should call saveState and loadState', () => {\r\n    authServiceSpy.updateFocusTimer.and.returnValue(of(void 0));\r\n    authServiceSpy.getUserData.and.returnValue(of({\r\n      focusTimer: {\r\n        workDuration: 20,\r\n        breakDuration: 10,\r\n        timeLeft: 1200,\r\n        isRunning: false,\r\n        isWork: true,\r\n        completedFocusSessions: 2,\r\n        totalWorkSeconds: 1000\r\n      }\r\n    } as any));\r\n    component.isBrowser = true;\r\n    component.saveState();\r\n    expect(authServiceSpy.updateFocusTimer).toHaveBeenCalled();\r\n    component.loadState();\r\n    expect(authServiceSpy.getUserData).toHaveBeenCalled();\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,aAAS,cAAc,MAAK;AAC1B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,yBAAiB;UACf,kBAAkB,QAAQ,UAAU,kBAAkB,EAAE,IAAI,YAAY,GAAG,CAAA,CAAE,CAAC;UAC9E,aAAa,QAAQ,UAAU,aAAa,EAAE,IAAI,YAAY,GAAG,EAAE,YAAY,CAAA,EAAE,CAAE,CAAC;;AAEtF,iBAAS,QAAQ,aAAa,qBAAqB,CAAC,gBAAgB,eAAe,CAAC;AACpF,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;YACA;YACA;YACA;YACA;YACA;YACA;;UAEF,WAAW;YACT,EAAE,SAAS,aAAa,UAAU,eAAc;YAChD,EAAE,SAAS,mBAAmB,UAAU,OAAM;;SAEjD,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,UAAU;AAC5C,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,oCAAoC,MAAK;AAC1C,cAAM,QAAQ,aAAa,EAAE,IAAI,SAAS,CAAC,OAAW;AAAG,aAAE;AAAI,iBAAO;QAAU,CAAC;AACjF,cAAM,QAAQ,eAAe;AAC7B,kBAAU,WAAW;AACrB,kBAAU,SAAS;AACnB,kBAAU,YAAY;AACtB,kBAAU,MAAK;AACf,eAAO,UAAU,SAAS,EAAE,SAAQ;AACpC,kBAAU,MAAK;AACf,eAAO,UAAU,SAAS,EAAE,UAAS;AACrC,eAAO,OAAO,aAAa,EAAE,iBAAgB;MAC/C,CAAC;AAED,SAAG,0BAA0B,MAAK;AAChC,cAAM,QAAQ,eAAe;AAC7B,kBAAU,SAAS;AACnB,kBAAU,eAAe;AACzB,kBAAU,gBAAgB;AAC1B,kBAAU,WAAW;AACrB,kBAAU,YAAY;AACtB,kBAAU,MAAK;AACf,eAAO,UAAU,SAAS,EAAE,UAAS;AACrC,eAAO,UAAU,QAAQ,EAAE,KAAK,GAAG;AACnC,kBAAU,SAAS;AACnB,kBAAU,MAAK;AACf,eAAO,UAAU,QAAQ,EAAE,KAAK,GAAG;MACrC,CAAC;AAED,SAAG,2BAA2B,MAAK;AACjC,kBAAU,SAAS;AACnB,kBAAU,eAAe;AACzB,kBAAU,gBAAe;AACzB,eAAO,UAAU,QAAQ,EAAE,KAAK,GAAG;AACnC,kBAAU,SAAS;AACnB,kBAAU,gBAAgB;AAC1B,kBAAU,gBAAe;AACzB,eAAO,UAAU,QAAQ,EAAE,KAAK,GAAG;MACrC,CAAC;AAED,SAAG,uCAAuC,MAAK;AAC7C,uBAAe,iBAAiB,IAAI,YAAY,GAAG,MAAM,CAAC;AAC1D,uBAAe,YAAY,IAAI,YAAY,GAAG;UAC5C,YAAY;YACV,cAAc;YACd,eAAe;YACf,UAAU;YACV,WAAW;YACX,QAAQ;YACR,wBAAwB;YACxB,kBAAkB;;SAEd,CAAC;AACT,kBAAU,YAAY;AACtB,kBAAU,UAAS;AACnB,eAAO,eAAe,gBAAgB,EAAE,iBAAgB;AACxD,kBAAU,UAAS;AACnB,eAAO,eAAe,WAAW,EAAE,iBAAgB;MACrD,CAAC;IACH,CAAC;;;",
  "names": []
}
