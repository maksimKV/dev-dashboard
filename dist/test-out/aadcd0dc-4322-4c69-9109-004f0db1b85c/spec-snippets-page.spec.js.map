{
  "version": 3,
  "sources": ["src/app/features/snippets/snippets-page/snippets-page.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { SnippetsPage } from './snippets-page';\r\nimport { AuthService } from '../../../shared/services/auth.service';\r\nimport { Clipboard } from '@angular/cdk/clipboard';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatChipsModule, MatChipListbox, MatChipOption } from '@angular/material/chips';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { HighlightModule } from 'ngx-highlightjs';\r\n\r\ndescribe('SnippetsPage', () => {\r\n  let component: SnippetsPage;\r\n  let fixture: ComponentFixture<SnippetsPage>;\r\n  let authServiceSpy: jasmine.SpyObj<AuthService>;\r\n  let clipboardSpy: jasmine.SpyObj<Clipboard>;\r\n  let cdrSpy: jasmine.SpyObj<ChangeDetectorRef>;\r\n\r\n  beforeEach(async () => {\r\n    authServiceSpy = {\r\n      updateSnippets: jasmine.createSpy('updateSnippets').and.returnValue(of({})),\r\n      getUserData: jasmine.createSpy('getUserData').and.returnValue(of({ snippets: [] }))\r\n    } as any;\r\n    clipboardSpy = jasmine.createSpyObj('Clipboard', ['copy']);\r\n    cdrSpy = jasmine.createSpyObj('ChangeDetectorRef', ['detectChanges']);\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        SnippetsPage,\r\n        CommonModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatChipsModule,\r\n        MatChipListbox,\r\n        MatChipOption,\r\n        MatSelectModule,\r\n        HighlightModule\r\n      ],\r\n      providers: [\r\n        { provide: AuthService, useValue: authServiceSpy },\r\n        { provide: Clipboard, useValue: clipboardSpy },\r\n        { provide: ChangeDetectorRef, useValue: cdrSpy },\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(SnippetsPage);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should add a new snippet', () => {\r\n    component.isBrowser = true;\r\n    component.newSnippet = { title: 'A', code: 'B', language: 'typescript', tags: [] };\r\n    spyOn(component, 'saveSnippets');\r\n    component.addOrUpdateSnippet();\r\n    expect(component.snippets.length).toBe(1);\r\n    expect(component.saveSnippets).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update an existing snippet', () => {\r\n    component.isBrowser = true;\r\n    component.snippets = [{ id: '1', title: 'A', code: 'B', language: 'typescript', tags: [], createdAt: 1, updatedAt: 1 }];\r\n    component.editingId = '1';\r\n    component.newSnippet = { title: 'C', code: 'D', language: 'typescript', tags: [] };\r\n    spyOn(component, 'saveSnippets');\r\n    component.addOrUpdateSnippet();\r\n    expect(component.snippets[0].title).toBe('C');\r\n    expect(component.saveSnippets).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should edit a snippet', () => {\r\n    const snippet = { id: '1', title: 'A', code: 'B', language: 'typescript', tags: [], createdAt: 1, updatedAt: 1 };\r\n    component.editSnippet(snippet);\r\n    expect(component.editingId).toBe('1');\r\n    expect(component.newSnippet.title).toBe('A');\r\n  });\r\n\r\n  it('should delete a snippet', () => {\r\n    component.snippets = [{ id: '1', title: 'A', code: 'B', language: 'typescript', tags: [], createdAt: 1, updatedAt: 1 }];\r\n    spyOn(component, 'saveSnippets');\r\n    component.deleteSnippet('1');\r\n    expect(component.snippets.length).toBe(0);\r\n    expect(component.saveSnippets).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should copy a snippet', () => {\r\n    component.copySnippet('code');\r\n    expect(clipboardSpy.copy).toHaveBeenCalledWith('code');\r\n  });\r\n\r\n  it('should save and load snippets', () => {\r\n    component.isBrowser = true;\r\n    authServiceSpy.updateSnippets.and.returnValue(of(void 0));\r\n    authServiceSpy.getUserData.and.returnValue(of({ snippets: [] } as any));\r\n    component.saveSnippets();\r\n    expect(authServiceSpy.updateSnippets).toHaveBeenCalled();\r\n    component.loadSnippets();\r\n    expect(authServiceSpy.getUserData).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should add and remove tags', () => {\r\n    component.newSnippet = { title: '', code: '', language: '', tags: [] };\r\n    const input = { value: 'tag1' } as any;\r\n    component.addTag(input);\r\n    expect(component.newSnippet.tags).toContain('tag1');\r\n    component.removeTag('tag1');\r\n    expect(component.newSnippet.tags).not.toContain('tag1');\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
