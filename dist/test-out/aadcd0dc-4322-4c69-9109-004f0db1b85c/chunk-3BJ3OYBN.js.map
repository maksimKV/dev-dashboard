{
  "version": 3,
  "sources": ["src/environments/environment.ts", "src/app/shared/services/auth.service.ts"],
  "sourcesContent": ["export const environment = {\n  appVersion: '1.0.1',\n  author: 'Maksim Kanev',\n  production: false,\n  apiUrl: 'http://localhost:4000/api'\n};\n", "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { Task } from '../models/task.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  message: string;\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\nexport interface FocusTimer {\r\n  workDuration: number;\r\n  breakDuration: number;\r\n  timeLeft: number;\r\n  isRunning: boolean;\r\n  isWork: boolean;\r\n  completedFocusSessions: number;\r\n  totalWorkSeconds: number;\r\n}\r\n\r\nexport interface Preferences {\r\n  defaultLandingPage: string;\r\n  focusDuration: number;\r\n  breakDuration: number;\r\n  features: {\r\n    tasks: boolean;\r\n    notes: boolean;\r\n    timer: boolean;\r\n    snippets: boolean;\r\n    stats: boolean;\r\n  };\r\n  sidebarPosition: string;\r\n  compactMode: boolean;\r\n  fontSize: string;\r\n  highContrast: boolean;\r\n  keyboardShortcuts: boolean;\r\n}\r\n\r\nexport interface UserData {\r\n  kanbanTasks: {\r\n    todo: Task[];\r\n    inProgress: Task[];\r\n    done: Task[];\r\n  };\r\n  focusTimer: FocusTimer;\r\n  markdownNote: string;\r\n  snippets: Snippet[];\r\n  preferences: Preferences;\r\n}\r\n\r\nexport interface ResendVerificationResponse { message: string; }\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private tokenSubject = new BehaviorSubject<string | null>(null);\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  currentUser$ = this.currentUserSubject.asObservable();\r\n  token$ = this.tokenSubject.asObservable();\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  private apiUrl = environment.apiUrl;\r\n  private isBrowser: boolean;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    this.isBrowser = isPlatformBrowser(this.platformId);\r\n    if (this.isBrowser) {\r\n      this.loadStoredAuth();\r\n    }\r\n  }\r\n\r\n  private loadStoredAuth() {\r\n    if (!this.isBrowser) return;\r\n    \r\n    const token = localStorage.getItem('auth_token');\r\n    const user = localStorage.getItem('auth_user');\r\n    \r\n    if (token && user) {\r\n      try {\r\n        this.tokenSubject.next(token);\r\n        this.currentUserSubject.next(JSON.parse(user));\r\n        this.isAuthenticatedSubject.next(true);\r\n      } catch (error) {\r\n        console.error('Failed to parse stored auth data:', error);\r\n        this.clearStoredAuth();\r\n      }\r\n    }\r\n  }\r\n\r\n  private clearStoredAuth() {\r\n    if (!this.isBrowser) return;\r\n    \r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('auth_user');\r\n  }\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.tokenSubject.value;\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  register(email: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/register`, {\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  login(email: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, {\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.clearStoredAuth();\r\n    this.tokenSubject.next(null);\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  setAuth(token: string, user: User) {\r\n    if (this.isBrowser) {\r\n      localStorage.setItem('auth_token', token);\r\n      localStorage.setItem('auth_user', JSON.stringify(user));\r\n    }\r\n    this.tokenSubject.next(token);\r\n    this.currentUserSubject.next(user);\r\n    this.isAuthenticatedSubject.next(true);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.tokenSubject.value;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n\r\n  // User data API methods\r\n  getUserData(): Observable<UserData> {\r\n    return this.http.get<UserData>(`${this.apiUrl}/user/data`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateKanbanTasks(kanbanTasks: { todo: Task[]; inProgress: Task[]; done: Task[] }): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/kanban-tasks`, { kanbanTasks }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateFocusTimer(focusTimer: FocusTimer): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/focus-timer`, { focusTimer }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateMarkdownNote(markdownNote: string): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/markdown-note`, { markdownNote }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateSnippets(snippets: Snippet[]): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/snippets`, { snippets }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updatePreferences(preferences: Preferences): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/user/preferences`, { preferences }, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  resendVerification(email: string): Observable<ResendVerificationResponse> {\r\n    return this.http.post<ResendVerificationResponse>(`${this.apiUrl}/auth/resend-verification`, { email });\r\n  }\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAAa;AAAb;;;AAAO,IAAM,cAAc;MACzB,YAAY;MACZ,QAAQ;MACR,YAAY;MACZ,QAAQ;;;;;;IC4DG;;;;;AAhEb;AACA;AACA;AACA;AAGA;AA0DO,IAAM,cAAN,MAAMA,aAAW;MAaZ;MACqB;MAbvB,qBAAqB,IAAI,gBAA6B,IAAI;MAC1D,eAAe,IAAI,gBAA+B,IAAI;MACtD,yBAAyB,IAAI,gBAAyB,KAAK;MAEnE,eAAe,KAAK,mBAAmB,aAAY;MACnD,SAAS,KAAK,aAAa,aAAY;MACvC,mBAAmB,KAAK,uBAAuB,aAAY;MAEnD,SAAS,YAAY;MACrB;MAER,YACU,MACqB,YAAkB;AADvC,aAAA,OAAA;AACqB,aAAA,aAAA;AAE7B,aAAK,YAAY,kBAAkB,KAAK,UAAU;AAClD,YAAI,KAAK,WAAW;AAClB,eAAK,eAAc;QACrB;MACF;MAEQ,iBAAc;AACpB,YAAI,CAAC,KAAK;AAAW;AAErB,cAAM,QAAQ,aAAa,QAAQ,YAAY;AAC/C,cAAM,OAAO,aAAa,QAAQ,WAAW;AAE7C,YAAI,SAAS,MAAM;AACjB,cAAI;AACF,iBAAK,aAAa,KAAK,KAAK;AAC5B,iBAAK,mBAAmB,KAAK,KAAK,MAAM,IAAI,CAAC;AAC7C,iBAAK,uBAAuB,KAAK,IAAI;UACvC,SAAS,OAAO;AACd,oBAAQ,MAAM,qCAAqC,KAAK;AACxD,iBAAK,gBAAe;UACtB;QACF;MACF;MAEQ,kBAAe;AACrB,YAAI,CAAC,KAAK;AAAW;AAErB,qBAAa,WAAW,YAAY;AACpC,qBAAa,WAAW,WAAW;MACrC;MAEQ,iBAAc;AACpB,cAAM,QAAQ,KAAK,aAAa;AAChC,eAAO,IAAI,YAAY;UACrB,gBAAgB;UAChB,iBAAiB,UAAU,KAAK;SACjC;MACH;MAEA,SAAS,OAAe,UAAgB;AACtC,eAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,kBAAkB;UAClE;UACA;SACD;MACH;MAEA,MAAM,OAAe,UAAgB;AACnC,eAAO,KAAK,KAAK,KAAmB,GAAG,KAAK,MAAM,eAAe;UAC/D;UACA;SACD;MACH;MAEA,SAAM;AACJ,aAAK,gBAAe;AACpB,aAAK,aAAa,KAAK,IAAI;AAC3B,aAAK,mBAAmB,KAAK,IAAI;AACjC,aAAK,uBAAuB,KAAK,KAAK;MACxC;MAEA,QAAQ,OAAe,MAAU;AAC/B,YAAI,KAAK,WAAW;AAClB,uBAAa,QAAQ,cAAc,KAAK;AACxC,uBAAa,QAAQ,aAAa,KAAK,UAAU,IAAI,CAAC;QACxD;AACA,aAAK,aAAa,KAAK,KAAK;AAC5B,aAAK,mBAAmB,KAAK,IAAI;AACjC,aAAK,uBAAuB,KAAK,IAAI;MACvC;MAEA,iBAAc;AACZ,eAAO,KAAK,mBAAmB;MACjC;MAEA,WAAQ;AACN,eAAO,KAAK,aAAa;MAC3B;MAEA,kBAAe;AACb,eAAO,KAAK,uBAAuB;MACrC;;MAGA,cAAW;AACT,eAAO,KAAK,KAAK,IAAc,GAAG,KAAK,MAAM,cAAc;UACzD,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,kBAAkB,aAA+D;AAC/E,eAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,sBAAsB,EAAE,YAAW,GAAI;UAC9E,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,iBAAiB,YAAsB;AACrC,eAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,qBAAqB,EAAE,WAAU,GAAI;UAC5E,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,mBAAmB,cAAoB;AACrC,eAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,uBAAuB,EAAE,aAAY,GAAI;UAChF,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,eAAe,UAAmB;AAChC,eAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,kBAAkB,EAAE,SAAQ,GAAI;UACvE,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,kBAAkB,aAAwB;AACxC,eAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,qBAAqB,EAAE,YAAW,GAAI;UAC7E,SAAS,KAAK,eAAc;SAC7B;MACH;MAEA,mBAAmB,OAAa;AAC9B,eAAO,KAAK,KAAK,KAAiC,GAAG,KAAK,MAAM,6BAA6B,EAAE,MAAK,CAAE;MACxG;;;6CA3HG,QAAM,MAAA,CAAC,WAAW,EAAA,CAAA,EAAA;;;AAdV,kBAAW,WAAA;MAHvB,WAAW;QACV,YAAY;OACb;OACY,WAAW;;;",
  "names": ["AuthService"]
}
