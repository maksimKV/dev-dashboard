{"version":3,"sources":["node_modules/@angular/core/fesm2022/rxjs-interop.mjs","node_modules/marked/lib/marked.esm.js","node_modules/ngx-markdown/fesm2022/ngx-markdown.mjs"],"sourcesContent":["/**\n * @license Angular v20.0.5\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { assertInInjectionContext, inject, DestroyRef, RuntimeError, Injector, assertNotInReactiveContext, signal, PendingTasks } from './root_effect_scheduler.mjs';\nimport { getOutputDestroyRef, effect, untracked, computed, resource, encapsulateResourceError } from './resource.mjs';\nimport './primitives/di.mjs';\nimport './signal.mjs';\nimport '@angular/core/primitives/di';\nimport '@angular/core/primitives/signals';\nimport './untracked.mjs';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/di/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @publicApi 19.0\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        ngDevMode && assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable((subscriber) => {\n        if (destroyRef.destroyed) {\n            subscriber.next();\n            return;\n        }\n        const unregisterFn = destroyRef.onDestroy(subscriber.next.bind(subscriber));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    source;\n    destroyed = false;\n    destroyRef = inject(DestroyRef);\n    constructor(source) {\n        this.source = source;\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new RuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: (value) => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @publicApi 19.0\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @publicApi 19.0\n */\nfunction outputToObservable(ref) {\n    const destroyRef = getOutputDestroyRef(ref);\n    return new Observable((observer) => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        const unregisterOnDestroy = destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe((v) => observer.next(v));\n        return () => {\n            subscription.unsubscribe();\n            unregisterOnDestroy?.();\n        };\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @publicApi 20.0\n */\nfunction toObservable(source, options) {\n    if (ngDevMode && !options?.injector) {\n        assertInInjectionContext(toObservable);\n    }\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](guide/di/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n */\nfunction toSignal(source, options) {\n    typeof ngDevMode !== 'undefined' &&\n        ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    if (ngDevMode && requiresCleanup && !options?.injector) {\n        assertInInjectionContext(toSignal);\n    }\n    const cleanupRef = requiresCleanup\n        ? (options?.injector?.get(DestroyRef) ?? inject(DestroyRef))\n        : null;\n    const equal = makeToSignalEqual(options?.equal);\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ }, { equal });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue }, { equal });\n    }\n    let destroyUnregisterFn;\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: (value) => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: (error) => {\n            state.set({ kind: 2 /* StateKind.Error */, error });\n            destroyUnregisterFn?.();\n        },\n        complete: () => {\n            destroyUnregisterFn?.();\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new RuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    destroyUnregisterFn = cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                throw new RuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                    '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    }, { equal: options?.equal });\n}\nfunction makeToSignalEqual(userEquality = Object.is) {\n    return (a, b) => a.kind === 1 /* StateKind.Value */ && b.kind === 1 /* StateKind.Value */ && userEquality(a.value, b.value);\n}\n\n/**\n * Operator which makes the application unstable until the observable emits, completes, errors, or is unsubscribed.\n *\n * Use this operator in observables whose subscriptions are important for rendering and should be included in SSR serialization.\n *\n * @param injector The `Injector` to use during creation. If this is not provided, the current injection context will be used instead (via `inject`).\n *\n * @developerPreview 20.0\n */\nfunction pendingUntilEvent(injector) {\n    if (injector === undefined) {\n        ngDevMode && assertInInjectionContext(pendingUntilEvent);\n        injector = inject(Injector);\n    }\n    const taskService = injector.get(PendingTasks);\n    return (sourceObservable) => {\n        return new Observable((originalSubscriber) => {\n            // create a new task on subscription\n            const removeTask = taskService.add();\n            let cleanedUp = false;\n            function cleanupTask() {\n                if (cleanedUp) {\n                    return;\n                }\n                removeTask();\n                cleanedUp = true;\n            }\n            const innerSubscription = sourceObservable.subscribe({\n                next: (v) => {\n                    originalSubscriber.next(v);\n                    cleanupTask();\n                },\n                complete: () => {\n                    originalSubscriber.complete();\n                    cleanupTask();\n                },\n                error: (e) => {\n                    originalSubscriber.error(e);\n                    cleanupTask();\n                },\n            });\n            innerSubscription.add(() => {\n                originalSubscriber.unsubscribe();\n                cleanupTask();\n            });\n            return innerSubscription;\n        });\n    };\n}\n\nfunction rxResource(opts) {\n    if (ngDevMode && !opts?.injector) {\n        assertInInjectionContext(rxResource);\n    }\n    return resource({\n        ...opts,\n        loader: undefined,\n        stream: (params) => {\n            let sub;\n            // Track the abort listener so it can be removed if the Observable completes (as a memory\n            // optimization).\n            const onAbort = () => sub.unsubscribe();\n            params.abortSignal.addEventListener('abort', onAbort);\n            // Start off stream as undefined.\n            const stream = signal({ value: undefined });\n            let resolve;\n            const promise = new Promise((r) => (resolve = r));\n            function send(value) {\n                stream.set(value);\n                resolve?.(stream);\n                resolve = undefined;\n            }\n            // TODO(alxhub): remove after g3 updated to rename loader -> stream\n            const streamFn = opts.stream ?? opts.loader;\n            if (streamFn === undefined) {\n                throw new RuntimeError(990 /* ɵRuntimeErrorCode.MUST_PROVIDE_STREAM_OPTION */, ngDevMode && `Must provide \\`stream\\` option.`);\n            }\n            sub = streamFn(params).subscribe({\n                next: (value) => send({ value }),\n                error: (error) => {\n                    send({ error: encapsulateResourceError(error) });\n                    params.abortSignal.removeEventListener('abort', onAbort);\n                },\n                complete: () => {\n                    if (resolve) {\n                        send({\n                            error: new RuntimeError(991 /* ɵRuntimeErrorCode.RESOURCE_COMPLETED_BEFORE_PRODUCING_VALUE */, ngDevMode && 'Resource completed before producing a value'),\n                        });\n                    }\n                    params.abortSignal.removeEventListener('abort', onAbort);\n                },\n            });\n            return promise;\n        },\n    });\n}\n\nexport { outputFromObservable, outputToObservable, pendingUntilEvent, rxResource, takeUntilDestroyed, toObservable, toSignal };\n\n","/**\n * marked v15.0.12 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n\n// src/defaults.ts\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n// src/rules.ts\nvar noopTest = { exec: () => null };\nfunction edit(regex, opt = \"\") {\n  let source = typeof regex === \"string\" ? regex : regex.source;\n  const obj = {\n    replace: (name, val) => {\n      let valSource = typeof val === \"string\" ? val : val.source;\n      valSource = valSource.replace(other.caret, \"$1\");\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nvar other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, \"i\")\n};\nvar newline = /^(?:[ \\t]*(?:\\n|$))+/;\nvar blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nvar lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex();\nvar lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", _blockLabel).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\";\nvar _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nvar html = edit(\n  \"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\",\n  \"i\"\n).replace(\"comment\", _comment).replace(\"tag\", _tag).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", paragraph).getRegex();\nvar blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText\n};\nvar gfmTable = edit(\n  \"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"\n).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex();\nvar blockGfm = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", gfmTable).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", _tag).getRegex()\n};\nvar blockPedantic = {\n  ...blockNormal,\n  html: edit(\n    `^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`\n  ).replace(\"comment\", _comment).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace(\"hr\", hr).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", lheading).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n};\nvar escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\nvar _punctuation = /[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nvar punctuation = edit(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, _punctuationOrSpace).getRegex();\nvar _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nvar _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nvar _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\nvar blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nvar emStrongLDelim = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuation).getRegex();\nvar emStrongLDelimGfm = edit(emStrongLDelimCore, \"u\").replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimAstCore = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\";\nvar emStrongRDelimAst = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, \"gu\").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();\nvar emStrongRDelimUnd = edit(\n  \"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\",\n  \"gu\"\n).replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\(punct)/, \"gu\").replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace(\"(?:-->|$)\", \"-->\").getRegex();\nvar tag = edit(\n  \"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\"\n).replace(\"comment\", _inlineComment).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", _inlineLabel).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", _inlineLabel).replace(\"ref\", _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", _blockLabel).getRegex();\nvar reflinkSearch = edit(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", reflink).replace(\"nolink\", nolink).getRegex();\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest\n};\nvar inlinePedantic = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", _inlineLabel).getRegex()\n};\nvar inlineGfm = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\nvar inlineBreaks = {\n  ...inlineGfm,\n  br: edit(br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inlineGfm.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n};\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n// src/helpers.ts\nvar escapeReplacements = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\"\n};\nvar getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape2(html2, encode) {\n  if (encode) {\n    if (other.escapeTest.test(html2)) {\n      return html2.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html2)) {\n      return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html2;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, \"%\");\n  } catch {\n    return null;\n  }\n  return href;\n}\nfunction splitCells(tableRow, count) {\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n    let escaped = false;\n    let curr = offset;\n    while (--curr >= 0 && str[curr] === \"\\\\\") escaped = !escaped;\n    if (escaped) {\n      return \"|\";\n    } else {\n      return \" |\";\n    }\n  }), cells = row.split(other.splitPipe);\n  let i = 0;\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push(\"\");\n    }\n  }\n  for (; i < cells.length; i++) {\n    cells[i] = cells[i].trim().replace(other.slashPipe, \"|\");\n  }\n  return cells;\n}\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return \"\";\n  }\n  let suffLen = 0;\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"\\\\\") {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n  return -1;\n}\n\n// src/Tokenizer.ts\nfunction outputLink(cap, link2, raw, lexer2, rules) {\n  const href = link2.href;\n  const title = link2.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, \"$1\");\n  lexer2.state.inLink = true;\n  const token = {\n    type: cap[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer2.inlineTokens(text)\n  };\n  lexer2.state.inLink = false;\n  return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split(\"\\n\").map((node) => {\n    const matchIndentInNode = node.match(rules.other.beginningSpace);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join(\"\\n\");\n}\nvar _Tokenizer = class {\n  options;\n  rules;\n  // set by the lexer\n  lexer;\n  // set by the lexer\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: \"space\",\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: cap[0],\n        codeBlockStyle: \"indented\",\n        text: !this.options.pedantic ? rtrim(text, \"\\n\") : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, \"#\");\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: \"hr\",\n        raw: rtrim(cap[0], \"\\n\")\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], \"\\n\").split(\"\\n\");\n      let raw = \"\";\n      let text = \"\";\n      const tokens = [];\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n        const currentRaw = currentLines.join(\"\\n\");\n        const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, \"\\n    $1\").replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        raw = raw ? `${raw}\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\n${currentText}` : currentText;\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n        if (lines.length === 0) {\n          break;\n        }\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"code\") {\n          break;\n        } else if (lastToken?.type === \"blockquote\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.blockquote(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === \"list\") {\n          const oldToken = lastToken;\n          const newText = oldToken.raw + \"\\n\" + lines.join(\"\\n\");\n          const newToken = this.list(newText);\n          tokens[tokens.length - 1] = newToken;\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1).raw.length).split(\"\\n\");\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw,\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list2 = {\n        type: \"list\",\n        raw: \"\",\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : \"\",\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : \"[*+-]\";\n      }\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      while (src) {\n        let endEarly = false;\n        let raw = \"\";\n        let itemContents = \"\";\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split(\"\\n\", 1)[0].replace(this.rules.other.listReplaceTabs, (t) => \" \".repeat(3 * t.length));\n        let nextLine = src.split(\"\\n\", 1)[0];\n        let blankLine = !line.trim();\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar);\n          indent = indent > 4 ? 1 : indent;\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) {\n          raw += nextLine + \"\\n\";\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n          while (src) {\n            const rawLine = src.split(\"\\n\", 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, \"  \");\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, \"    \");\n            }\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {\n              itemContents += \"\\n\" + nextLineWithoutTabs.slice(indent);\n            } else {\n              if (blankLine) {\n                break;\n              }\n              if (line.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4) {\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += \"\\n\" + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              blankLine = true;\n            }\n            raw += rawLine + \"\\n\";\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n        if (!list2.loose) {\n          if (endsWithBlankLine) {\n            list2.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        let istask = null;\n        let ischecked;\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== \"[ ] \";\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, \"\");\n          }\n        }\n        list2.items.push({\n          type: \"list_item\",\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list2.raw += raw;\n      }\n      const lastItem = list2.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        return;\n      }\n      list2.raw = list2.raw.trimEnd();\n      for (let i = 0; i < list2.items.length; i++) {\n        this.lexer.state.top = false;\n        list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);\n        if (!list2.loose) {\n          const spacers = list2.items[i].tokens.filter((t) => t.type === \"space\");\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => this.rules.other.anyLine.test(t.raw));\n          list2.loose = hasMultipleLineBreaks;\n        }\n      }\n      if (list2.loose) {\n        for (let i = 0; i < list2.items.length; i++) {\n          list2.items[i].loose = true;\n        }\n      }\n      return list2;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: \"html\",\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\",\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\";\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : cap[3];\n      return {\n        type: \"def\",\n        tag: tag2,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      return;\n    }\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\");\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, \"\").split(\"\\n\") : [];\n    const item = {\n      type: \"table\",\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: []\n    };\n    if (headers.length !== aligns.length) {\n      return;\n    }\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push(\"right\");\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push(\"center\");\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push(\"left\");\n      } else {\n        item.align.push(null);\n      }\n    }\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i]\n      });\n    }\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i]\n        };\n      }));\n    }\n    return item;\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: \"heading\",\n        raw: cap[0],\n        depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === \"\\n\" ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: \"paragraph\",\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: \"escape\",\n        raw: cap[0],\n        text: cap[1]\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: \"html\",\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          return;\n        }\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), \"\\\\\");\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        const lastParenIndex = findClosingBracket(cap[2], \"()\");\n        if (lastParenIndex === -2) {\n          return;\n        }\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf(\"!\") === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = \"\";\n        }\n      }\n      let href = cap[2];\n      let title = \"\";\n      if (this.options.pedantic) {\n        const link2 = this.rules.other.pedanticHrefTitle.exec(href);\n        if (link2) {\n          href = link2[1];\n          title = link2[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : \"\";\n      }\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, \"$1\") : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, \"$1\") : title\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, \" \");\n      const link2 = links[linkString.toLowerCase()];\n      if (!link2) {\n        const text = cap[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link2, cap[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = \"\") {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n    const nextChar = match[1] || match[2] || \"\";\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n      const endReg = match[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue;\n        rLength = [...rDelim].length;\n        if (match[3] || match[4]) {\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue;\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue;\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n        if (Math.min(lLength, rLength) % 2) {\n          const text2 = raw.slice(1, -1);\n          return {\n            type: \"em\",\n            raw,\n            text: text2,\n            tokens: this.lexer.inlineTokens(text2)\n          };\n        }\n        const text = raw.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, \" \");\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: \"codespan\",\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: \"br\",\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: \"del\",\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[1];\n        href = \"mailto:\" + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  url(src) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === \"@\") {\n        text = cap[0];\n        href = \"mailto:\" + text;\n      } else {\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? \"\";\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === \"www.\") {\n          href = \"http://\" + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: \"link\",\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: \"text\",\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: cap[0],\n        text: cap[0],\n        escaped\n      };\n    }\n  }\n};\n\n// src/Lexer.ts\nvar _Lexer = class __Lexer {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n  constructor(options2) {\n    this.tokens = [];\n    this.tokens.links = /* @__PURE__ */ Object.create(null);\n    this.options = options2 || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options2) {\n    const lexer2 = new __Lexer(options2);\n    return lexer2.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(other.carriageReturn, \"\\n\");\n    this.blockTokens(src, this.tokens);\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n    return this.tokens;\n  }\n  blockTokens(src, tokens = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, \"    \").replace(other.spaceLine, \"\");\n    }\n    while (src) {\n      let token;\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== void 0) {\n          lastToken.raw += \"\\n\";\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"paragraph\" || lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.raw;\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw;\n          lastToken.text += \"\\n\" + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1).src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let maskedSrc = src;\n    let match = null;\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"++\" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + \"[\" + \"a\".repeat(match[0].length - 2) + \"]\" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    let keepPrevChar = false;\n    let prevChar = \"\";\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = \"\";\n      }\n      keepPrevChar = false;\n      let token;\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === \"text\" && lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== \"_\") {\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === \"text\") {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\n// src/Renderer.ts\nvar _Renderer = class {\n  options;\n  parser;\n  // set by the parser\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  space(token) {\n    return \"\";\n  }\n  code({ text, lang, escaped }) {\n    const langString = (lang || \"\").match(other.notSpaceStart)?.[0];\n    const code = text.replace(other.endingNewline, \"\") + \"\\n\";\n    if (!langString) {\n      return \"<pre><code>\" + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n    }\n    return '<pre><code class=\"language-' + escape2(langString) + '\">' + (escaped ? code : escape2(code, true)) + \"</code></pre>\\n\";\n  }\n  blockquote({ tokens }) {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\n${body}</blockquote>\n`;\n  }\n  html({ text }) {\n    return text;\n  }\n  heading({ tokens, depth }) {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\n`;\n  }\n  hr(token) {\n    return \"<hr>\\n\";\n  }\n  list(token) {\n    const ordered = token.ordered;\n    const start = token.start;\n    let body = \"\";\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n    const type = ordered ? \"ol\" : \"ul\";\n    const startAttr = ordered && start !== 1 ? ' start=\"' + start + '\"' : \"\";\n    return \"<\" + type + startAttr + \">\\n\" + body + \"</\" + type + \">\\n\";\n  }\n  listitem(item) {\n    let itemBody = \"\";\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === \"paragraph\") {\n          item.tokens[0].text = checkbox + \" \" + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === \"text\") {\n            item.tokens[0].tokens[0].text = checkbox + \" \" + escape2(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: \"text\",\n            raw: checkbox + \" \",\n            text: checkbox + \" \",\n            escaped: true\n          });\n        }\n      } else {\n        itemBody += checkbox + \" \";\n      }\n    }\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n    return `<li>${itemBody}</li>\n`;\n  }\n  checkbox({ checked }) {\n    return \"<input \" + (checked ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph({ tokens }) {\n    return `<p>${this.parser.parseInline(tokens)}</p>\n`;\n  }\n  table(token) {\n    let header = \"\";\n    let cell = \"\";\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n    let body = \"\";\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n      cell = \"\";\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n    return \"<table>\\n<thead>\\n\" + header + \"</thead>\\n\" + body + \"</table>\\n\";\n  }\n  tablerow({ text }) {\n    return `<tr>\n${text}</tr>\n`;\n  }\n  tablecell(token) {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? \"th\" : \"td\";\n    const tag2 = token.align ? `<${type} align=\"${token.align}\">` : `<${type}>`;\n    return tag2 + content + `</${type}>\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong({ tokens }) {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n  em({ tokens }) {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n  codespan({ text }) {\n    return `<code>${escape2(text, true)}</code>`;\n  }\n  br(token) {\n    return \"<br>\";\n  }\n  del({ tokens }) {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n  link({ href, title, tokens }) {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + escape2(title) + '\"';\n    }\n    out += \">\" + text + \"</a>\";\n    return out;\n  }\n  image({ href, title, text, tokens }) {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape2(text);\n    }\n    href = cleanHref;\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape2(title)}\"`;\n    }\n    out += \">\";\n    return out;\n  }\n  text(token) {\n    return \"tokens\" in token && token.tokens ? this.parser.parseInline(token.tokens) : \"escaped\" in token && token.escaped ? token.text : escape2(token.text);\n  }\n};\n\n// src/TextRenderer.ts\nvar _TextRenderer = class {\n  // no need for block level renderers\n  strong({ text }) {\n    return text;\n  }\n  em({ text }) {\n    return text;\n  }\n  codespan({ text }) {\n    return text;\n  }\n  del({ text }) {\n    return text;\n  }\n  html({ text }) {\n    return text;\n  }\n  text({ text }) {\n    return text;\n  }\n  link({ text }) {\n    return \"\" + text;\n  }\n  image({ text }) {\n    return \"\" + text;\n  }\n  br() {\n    return \"\";\n  }\n};\n\n// src/Parser.ts\nvar _Parser = class __Parser {\n  options;\n  renderer;\n  textRenderer;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options2) {\n    const parser2 = new __Parser(options2);\n    return parser2.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(genericToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"space\": {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case \"hr\": {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case \"heading\": {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case \"code\": {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case \"table\": {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case \"blockquote\": {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case \"list\": {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case \"html\": {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case \"paragraph\": {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case \"text\": {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === \"text\") {\n            textToken = tokens[++i];\n            body += \"\\n\" + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: \"paragraph\",\n              raw: body,\n              text: body,\n              tokens: [{ type: \"text\", raw: body, text: body, escaped: true }]\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer = this.renderer) {\n    let out = \"\";\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(anyToken.type)) {\n          out += ret || \"\";\n          continue;\n        }\n      }\n      const token = anyToken;\n      switch (token.type) {\n        case \"escape\": {\n          out += renderer.text(token);\n          break;\n        }\n        case \"html\": {\n          out += renderer.html(token);\n          break;\n        }\n        case \"link\": {\n          out += renderer.link(token);\n          break;\n        }\n        case \"image\": {\n          out += renderer.image(token);\n          break;\n        }\n        case \"strong\": {\n          out += renderer.strong(token);\n          break;\n        }\n        case \"em\": {\n          out += renderer.em(token);\n          break;\n        }\n        case \"codespan\": {\n          out += renderer.codespan(token);\n          break;\n        }\n        case \"br\": {\n          out += renderer.br(token);\n          break;\n        }\n        case \"del\": {\n          out += renderer.del(token);\n          break;\n        }\n        case \"text\": {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return \"\";\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n};\n\n// src/Hooks.ts\nvar _Hooks = class {\n  options;\n  block;\n  constructor(options2) {\n    this.options = options2 || _defaults;\n  }\n  static passThroughHooks = /* @__PURE__ */ new Set([\n    \"preprocess\",\n    \"postprocess\",\n    \"processAllTokens\"\n  ]);\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html2) {\n    return html2;\n  }\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens) {\n    return tokens;\n  }\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n};\n\n// src/Instance.ts\nvar Marked = class {\n  defaults = _getDefaults();\n  options = this.setOptions;\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n  constructor(...args) {\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case \"table\": {\n          const tableToken = token;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case \"list\": {\n          const listToken = token;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens2 = genericToken[childTokens].flat(Infinity);\n              values = values.concat(this.walkTokens(tokens2, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n    args.forEach((pack) => {\n      const opts = { ...pack };\n      opts.async = this.defaults.async || opts.async || false;\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error(\"extension name required\");\n          }\n          if (\"renderer\" in ext) {\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              extensions.renderers[ext.name] = function(...args2) {\n                let ret = ext.renderer.apply(this, args2);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args2);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (\"tokenizer\" in ext) {\n            if (!ext.level || ext.level !== \"block\" && ext.level !== \"inline\") {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              if (ext.level === \"block\") {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === \"inline\") {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (\"childTokens\" in ext && ext.childTokens) {\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"parser\"].includes(prop)) {\n            continue;\n          }\n          const rendererProp = prop;\n          const rendererFunc = pack.renderer[rendererProp];\n          const prevRenderer = renderer[rendererProp];\n          renderer[rendererProp] = (...args2) => {\n            let ret = rendererFunc.apply(renderer, args2);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args2);\n            }\n            return ret || \"\";\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if ([\"options\", \"rules\", \"lexer\"].includes(prop)) {\n            continue;\n          }\n          const tokenizerProp = prop;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp];\n          const prevTokenizer = tokenizer[tokenizerProp];\n          tokenizer[tokenizerProp] = (...args2) => {\n            let ret = tokenizerFunc.apply(tokenizer, args2);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args2);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if ([\"options\", \"block\"].includes(prop)) {\n            continue;\n          }\n          const hooksProp = prop;\n          const hooksFunc = pack.hooks[hooksProp];\n          const prevHook = hooks[hooksProp];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[hooksProp] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {\n                  return prevHook.call(hooks, ret2);\n                });\n              }\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[hooksProp] = (...args2) => {\n              let ret = hooksFunc.apply(hooks, args2);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args2);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      if (pack.walkTokens) {\n        const walkTokens2 = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens2) {\n            values = values.concat(walkTokens2.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = { ...this.defaults, ...opts };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n  lexer(src, options2) {\n    return _Lexer.lex(src, options2 ?? this.defaults);\n  }\n  parser(tokens, options2) {\n    return _Parser.parse(tokens, options2 ?? this.defaults);\n  }\n  parseMarkdown(blockType) {\n    const parse2 = (src, options2) => {\n      const origOpt = { ...options2 };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      }\n      if (typeof src === \"undefined\" || src === null) {\n        return throwError(new Error(\"marked(): input parameter is undefined or null\"));\n      }\n      if (typeof src !== \"string\") {\n        return throwError(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(src) + \", string expected\"));\n      }\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n      const lexer2 = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;\n      const parser2 = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html2) => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);\n      }\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        let tokens = lexer2(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html2 = parser2(tokens, opt);\n        if (opt.hooks) {\n          html2 = opt.hooks.postprocess(html2);\n        }\n        return html2;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n    return parse2;\n  }\n  onError(silent, async) {\n    return (e) => {\n      e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\";\n      if (silent) {\n        const msg = \"<p>An error occurred:</p><pre>\" + escape2(e.message + \"\", true) + \"</pre>\";\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n};\n\n// src/marked.ts\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\nmarked.options = marked.setOptions = function(options2) {\n  markedInstance.setOptions(options2);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\nmarked.parseInline = markedInstance.parseInline;\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport {\n  _Hooks as Hooks,\n  _Lexer as Lexer,\n  Marked,\n  _Parser as Parser,\n  _Renderer as Renderer,\n  _TextRenderer as TextRenderer,\n  _Tokenizer as Tokenizer,\n  _defaults as defaults,\n  _getDefaults as getDefaults,\n  lexer,\n  marked,\n  options,\n  parse,\n  parseInline,\n  parser,\n  setOptions,\n  use,\n  walkTokens\n};\n\n","import * as i0 from '@angular/core';\nimport { computed, ChangeDetectionStrategy, Component, InjectionToken, Pipe, PLATFORM_ID, Inject, Optional, Injectable, EventEmitter, Output, Input, SecurityContext, NgModule } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { Subject, merge, of, timer } from 'rxjs';\nimport { switchMap, mapTo, distinctUntilChanged, shareReplay, map, takeUntil, first } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Renderer, marked } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\n\nconst BUTTON_TEXT_COPY = 'Copy';\nconst BUTTON_TEXT_COPIED = 'Copied';\nclass ClipboardButtonComponent {\n    constructor() {\n        this._buttonClick$ = new Subject();\n        this.copied = toSignal(this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1)));\n        this.copiedText = computed(() => this.copied()\n            ? BUTTON_TEXT_COPIED\n            : BUTTON_TEXT_COPY);\n    }\n    onCopyToClipboardClick() {\n        this._buttonClick$.next();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ClipboardButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: ClipboardButtonComponent, isStandalone: true, selector: \"markdown-clipboard\", ngImport: i0, template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied()\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText() }}</button>\r\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ClipboardButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'markdown-clipboard',\n                    template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied()\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText() }}</button>\r\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }] });\n\nconst CLIPBOARD_OPTIONS = new InjectionToken('CLIPBOARD_OPTIONS');\n\n/* eslint-disable */\nclass KatexSpecificOptions {\n}\n\nclass LanguagePipe {\n    transform(value, language) {\n        if (value == null) {\n            value = '';\n        }\n        if (language == null) {\n            language = '';\n        }\n        if (typeof value !== 'string') {\n            console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\n            return value;\n        }\n        if (typeof language !== 'string') {\n            console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\n            return value;\n        }\n        return '```' + language + '\\n' + value + '\\n```';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: LanguagePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: LanguagePipe, isStandalone: true, name: \"language\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: LanguagePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'language',\n                }]\n        }] });\n\nvar PrismPlugin;\n(function (PrismPlugin) {\n    PrismPlugin[\"CommandLine\"] = \"command-line\";\n    PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\n    PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\n})(PrismPlugin || (PrismPlugin = {}));\n\nconst MARKED_EXTENSIONS = new InjectionToken('MARKED_EXTENSIONS');\n\nconst MARKED_OPTIONS = new InjectionToken('MARKED_OPTIONS');\n\nconst MERMAID_OPTIONS = new InjectionToken('MERMAID_OPTIONS');\n\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\nconst errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';\nconst errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';\nconst errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\nclass ExtendedRenderer extends Renderer {\n    constructor() {\n        super(...arguments);\n        this.ɵNgxMarkdownRendererExtendedForExtensions = false;\n        this.ɵNgxMarkdownRendererExtendedForMermaid = false;\n    }\n}\nclass MarkdownService {\n    get options() { return this._options; }\n    set options(value) {\n        this._options = { ...this.DEFAULT_MARKED_OPTIONS, ...value };\n    }\n    get renderer() { return this.options.renderer; }\n    set renderer(value) {\n        this.options.renderer = value;\n    }\n    constructor(clipboardOptions, extensions, options, mermaidOptions, platform, securityContext, http, sanitizer) {\n        this.clipboardOptions = clipboardOptions;\n        this.extensions = extensions;\n        this.mermaidOptions = mermaidOptions;\n        this.platform = platform;\n        this.securityContext = securityContext;\n        this.http = http;\n        this.sanitizer = sanitizer;\n        this.DEFAULT_MARKED_OPTIONS = {\n            renderer: new Renderer(),\n        };\n        this.DEFAULT_KATEX_OPTIONS = {\n            delimiters: [\n                { left: '$$', right: '$$', display: true },\n                { left: '$', right: '$', display: false },\n                { left: '\\\\(', right: '\\\\)', display: false },\n                { left: '\\\\begin{equation}', right: '\\\\end{equation}', display: true },\n                { left: '\\\\begin{align}', right: '\\\\end{align}', display: true },\n                { left: '\\\\begin{alignat}', right: '\\\\end{alignat}', display: true },\n                { left: '\\\\begin{gather}', right: '\\\\end{gather}', display: true },\n                { left: '\\\\begin{CD}', right: '\\\\end{CD}', display: true },\n                { left: '\\\\[', right: '\\\\]', display: true },\n            ],\n        };\n        this.DEFAULT_MERMAID_OPTIONS = {\n            startOnLoad: false,\n        };\n        this.DEFAULT_CLIPBOARD_OPTIONS = {\n            buttonComponent: undefined,\n        };\n        this.DEFAULT_PARSE_OPTIONS = {\n            decodeHtml: false,\n            inline: false,\n            emoji: false,\n            mermaid: false,\n            markedOptions: undefined,\n            disableSanitizer: false,\n        };\n        this.DEFAULT_RENDER_OPTIONS = {\n            clipboard: false,\n            clipboardOptions: undefined,\n            katex: false,\n            katexOptions: undefined,\n            mermaid: false,\n            mermaidOptions: undefined,\n        };\n        this._reload$ = new Subject();\n        this.reload$ = this._reload$.asObservable();\n        this.options = options;\n    }\n    parse(markdown, parseOptions = this.DEFAULT_PARSE_OPTIONS) {\n        const { decodeHtml, inline, emoji, mermaid, disableSanitizer, } = parseOptions;\n        const markedOptions = {\n            ...this.options,\n            ...parseOptions.markedOptions,\n        };\n        const renderer = markedOptions.renderer || this.renderer || new Renderer();\n        if (this.extensions) {\n            this.renderer = this.extendsRendererForExtensions(renderer);\n        }\n        if (mermaid) {\n            this.renderer = this.extendsRendererForMermaid(renderer);\n        }\n        const trimmed = this.trimIndentation(markdown);\n        const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\n        const emojified = emoji ? this.parseEmoji(decoded) : decoded;\n        const marked = this.parseMarked(emojified, markedOptions, inline);\n        const sanitized = disableSanitizer ? marked : this.sanitizer.sanitize(this.securityContext, marked);\n        return sanitized || '';\n    }\n    render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {\n        const { clipboard, clipboardOptions, katex, katexOptions, mermaid, mermaidOptions, } = options;\n        if (katex) {\n            this.renderKatex(element, {\n                ...this.DEFAULT_KATEX_OPTIONS,\n                ...katexOptions,\n            });\n        }\n        if (mermaid) {\n            this.renderMermaid(element, {\n                ...this.DEFAULT_MERMAID_OPTIONS,\n                ...this.mermaidOptions,\n                ...mermaidOptions,\n            });\n        }\n        if (clipboard) {\n            this.renderClipboard(element, viewContainerRef, {\n                ...this.DEFAULT_CLIPBOARD_OPTIONS,\n                ...this.clipboardOptions,\n                ...clipboardOptions,\n            });\n        }\n        this.highlight(element);\n    }\n    reload() {\n        this._reload$.next();\n    }\n    getSource(src) {\n        if (!this.http) {\n            throw new Error(errorSrcWithoutHttpClient);\n        }\n        return this.http\n            .get(src, { responseType: 'text' })\n            .pipe(map(markdown => this.handleExtension(src, markdown)));\n    }\n    highlight(element) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {\n            return;\n        }\n        if (!element) {\n            element = document;\n        }\n        const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\n        Array.prototype.forEach.call(noLanguageElements, (x) => x.classList.add('language-none'));\n        Prism.highlightAllUnder(element);\n    }\n    decodeHtml(html) {\n        if (!isPlatformBrowser(this.platform)) {\n            return html;\n        }\n        const textarea = document.createElement('textarea');\n        textarea.innerHTML = html;\n        return textarea.value;\n    }\n    extendsRendererForExtensions(renderer) {\n        const extendedRenderer = renderer;\n        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions === true) {\n            return renderer;\n        }\n        if (this.extensions?.length > 0) {\n            marked.use(...this.extensions);\n        }\n        extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions = true;\n        return renderer;\n    }\n    extendsRendererForMermaid(renderer) {\n        const extendedRenderer = renderer;\n        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid === true) {\n            return renderer;\n        }\n        const defaultCode = renderer.code;\n        renderer.code = (token) => {\n            return token.lang === 'mermaid'\n                ? `<div class=\"mermaid\">${token.text}</div>`\n                : defaultCode(token);\n        };\n        extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid = true;\n        return renderer;\n    }\n    handleExtension(src, markdown) {\n        const urlProtocolIndex = src.lastIndexOf('://');\n        const urlWithoutProtocol = urlProtocolIndex > -1\n            ? src.substring(urlProtocolIndex + 4)\n            : src;\n        const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');\n        const lastUrlSegment = lastSlashIndex > -1\n            ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0]\n            : '';\n        const lastDotIndex = lastUrlSegment.lastIndexOf('.');\n        const extension = lastDotIndex > -1\n            ? lastUrlSegment.substring(lastDotIndex + 1)\n            : '';\n        return !!extension && extension !== 'md'\n            ? '```' + extension + '\\n' + markdown + '\\n```'\n            : markdown;\n    }\n    parseMarked(html, markedOptions, inline = false) {\n        if (markedOptions.renderer) {\n            // clone renderer and remove extended flags otherwise\n            // marked throws an error thinking it is a renderer prop\n            const renderer = { ...markedOptions.renderer };\n            delete renderer.ɵNgxMarkdownRendererExtendedForExtensions;\n            delete renderer.ɵNgxMarkdownRendererExtendedForMermaid;\n            // remove renderer from markedOptions because if renderer is\n            // passed to marked.parse method, it will ignore all extensions\n            delete markedOptions.renderer;\n            marked.use({ renderer });\n        }\n        return inline\n            ? marked.parseInline(html, markedOptions)\n            : marked.parse(html, markedOptions);\n    }\n    parseEmoji(html) {\n        if (!isPlatformBrowser(this.platform)) {\n            return html;\n        }\n        if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\n            throw new Error(errorJoyPixelsNotLoaded);\n        }\n        return joypixels.shortnameToUnicode(html);\n    }\n    renderKatex(element, options) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {\n            throw new Error(errorKatexNotLoaded);\n        }\n        renderMathInElement(element, options);\n    }\n    renderClipboard(element, viewContainerRef, options) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof ClipboardJS === 'undefined') {\n            throw new Error(errorClipboardNotLoaded);\n        }\n        if (!viewContainerRef) {\n            throw new Error(errorClipboardViewContainerRequired);\n        }\n        const { buttonComponent, buttonTemplate, } = options;\n        // target every <pre> elements\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            const preElement = preElements.item(i);\n            // create <pre> wrapper element\n            const preWrapperElement = document.createElement('div');\n            preWrapperElement.style.position = 'relative';\n            preElement.parentNode.insertBefore(preWrapperElement, preElement);\n            preWrapperElement.appendChild(preElement);\n            // create toolbar element\n            const toolbarWrapperElement = document.createElement('div');\n            toolbarWrapperElement.classList.add('markdown-clipboard-toolbar');\n            toolbarWrapperElement.style.position = 'absolute';\n            toolbarWrapperElement.style.top = '.5em';\n            toolbarWrapperElement.style.right = '.5em';\n            toolbarWrapperElement.style.zIndex = '1';\n            preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement);\n            // register listener to show/hide toolbar\n            preWrapperElement.onmouseenter = () => toolbarWrapperElement.classList.add('hover');\n            preWrapperElement.onmouseleave = () => toolbarWrapperElement.classList.remove('hover');\n            // declare embeddedViewRef holding variable\n            let embeddedViewRef;\n            // use provided component via input property\n            // or provided via ClipboardOptions provider\n            if (buttonComponent) {\n                const componentRef = viewContainerRef.createComponent(buttonComponent);\n                embeddedViewRef = componentRef.hostView;\n                componentRef.changeDetectorRef.markForCheck();\n            }\n            // use provided template via input property\n            else if (buttonTemplate) {\n                embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);\n            }\n            // use default component\n            else {\n                const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);\n                embeddedViewRef = componentRef.hostView;\n                componentRef.changeDetectorRef.markForCheck();\n            }\n            // declare clipboard instance variable\n            let clipboardInstance;\n            // attach clipboard.js to root node\n            embeddedViewRef.rootNodes.forEach((node) => {\n                toolbarWrapperElement.appendChild(node);\n                clipboardInstance = new ClipboardJS(node, { text: () => preElement.innerText });\n            });\n            // destroy clipboard instance when view is destroyed\n            embeddedViewRef.onDestroy(() => clipboardInstance.destroy());\n        }\n    }\n    renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof mermaid === 'undefined' || typeof mermaid.initialize === 'undefined') {\n            throw new Error(errorMermaidNotLoaded);\n        }\n        const mermaidElements = element.querySelectorAll('.mermaid');\n        if (mermaidElements.length === 0) {\n            return;\n        }\n        mermaid.initialize(options);\n        mermaid.run({ nodes: mermaidElements });\n    }\n    trimIndentation(markdown) {\n        if (!markdown) {\n            return '';\n        }\n        let indentStart;\n        return markdown\n            .split('\\n')\n            .map(line => {\n            let lineIdentStart = indentStart;\n            if (line.length > 0) {\n                lineIdentStart = isNaN(lineIdentStart)\n                    ? line.search(/\\S|$/)\n                    : Math.min(line.search(/\\S|$/), lineIdentStart);\n            }\n            if (isNaN(indentStart)) {\n                indentStart = lineIdentStart;\n            }\n            return lineIdentStart\n                ? line.substring(lineIdentStart)\n                : line;\n        }).join('\\n');\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownService, deps: [{ token: CLIPBOARD_OPTIONS, optional: true }, { token: MARKED_EXTENSIONS, optional: true }, { token: MARKED_OPTIONS, optional: true }, { token: MERMAID_OPTIONS, optional: true }, { token: PLATFORM_ID }, { token: SECURITY_CONTEXT }, { token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownService, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CLIPBOARD_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MARKED_EXTENSIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MARKED_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MERMAID_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.SecurityContext, decorators: [{\n                    type: Inject,\n                    args: [SECURITY_CONTEXT]\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }] });\n\nclass MarkdownComponent {\n    get disableSanitizer() { return this._disableSanitizer; }\n    set disableSanitizer(value) { this._disableSanitizer = this.coerceBooleanProperty(value); }\n    get inline() { return this._inline; }\n    set inline(value) { this._inline = this.coerceBooleanProperty(value); }\n    // Plugin - clipboard\n    get clipboard() { return this._clipboard; }\n    set clipboard(value) { this._clipboard = this.coerceBooleanProperty(value); }\n    // Plugin - emoji\n    get emoji() { return this._emoji; }\n    set emoji(value) { this._emoji = this.coerceBooleanProperty(value); }\n    // Plugin - katex\n    get katex() { return this._katex; }\n    set katex(value) { this._katex = this.coerceBooleanProperty(value); }\n    // Plugin - mermaid\n    get mermaid() { return this._mermaid; }\n    set mermaid(value) { this._mermaid = this.coerceBooleanProperty(value); }\n    // Plugin - lineHighlight\n    get lineHighlight() { return this._lineHighlight; }\n    set lineHighlight(value) { this._lineHighlight = this.coerceBooleanProperty(value); }\n    // Plugin - lineNumbers\n    get lineNumbers() { return this._lineNumbers; }\n    set lineNumbers(value) { this._lineNumbers = this.coerceBooleanProperty(value); }\n    // Plugin - commandLine\n    get commandLine() { return this._commandLine; }\n    set commandLine(value) { this._commandLine = this.coerceBooleanProperty(value); }\n    constructor(element, markdownService, viewContainerRef) {\n        this.element = element;\n        this.markdownService = markdownService;\n        this.viewContainerRef = viewContainerRef;\n        // Event emitters\n        this.error = new EventEmitter();\n        this.load = new EventEmitter();\n        this.ready = new EventEmitter();\n        this._clipboard = false;\n        this._commandLine = false;\n        this._disableSanitizer = false;\n        this._emoji = false;\n        this._inline = false;\n        this._katex = false;\n        this._lineHighlight = false;\n        this._lineNumbers = false;\n        this._mermaid = false;\n        this.destroyed$ = new Subject();\n    }\n    ngOnChanges() {\n        this.loadContent();\n    }\n    loadContent() {\n        if (this.data != null) {\n            this.handleData();\n            return;\n        }\n        if (this.src != null) {\n            this.handleSrc();\n            return;\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.data && !this.src) {\n            this.handleTransclusion();\n        }\n        this.markdownService.reload$\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe(() => this.loadContent());\n    }\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    async render(markdown, decodeHtml = false) {\n        const parsedOptions = {\n            decodeHtml,\n            inline: this.inline,\n            emoji: this.emoji,\n            mermaid: this.mermaid,\n            disableSanitizer: this.disableSanitizer,\n        };\n        const renderOptions = {\n            clipboard: this.clipboard,\n            clipboardOptions: this.getClipboardOptions(),\n            katex: this.katex,\n            katexOptions: this.katexOptions,\n            mermaid: this.mermaid,\n            mermaidOptions: this.mermaidOptions,\n        };\n        const parsed = await this.markdownService.parse(markdown, parsedOptions);\n        this.element.nativeElement.innerHTML = parsed;\n        this.handlePlugins();\n        this.markdownService.render(this.element.nativeElement, renderOptions, this.viewContainerRef);\n        this.ready.emit();\n    }\n    coerceBooleanProperty(value) {\n        return value != null && `${String(value)}` !== 'false';\n    }\n    getClipboardOptions() {\n        if (this.clipboardButtonComponent || this.clipboardButtonTemplate) {\n            return {\n                buttonComponent: this.clipboardButtonComponent,\n                buttonTemplate: this.clipboardButtonTemplate,\n            };\n        }\n        return undefined;\n    }\n    handleData() {\n        this.render(this.data);\n    }\n    handleSrc() {\n        this.markdownService\n            .getSource(this.src)\n            .subscribe({\n            next: markdown => {\n                this.render(markdown).then(() => {\n                    this.load.emit(markdown);\n                });\n            },\n            error: (error) => this.error.emit(error),\n        });\n    }\n    handleTransclusion() {\n        this.render(this.element.nativeElement.innerHTML, true);\n    }\n    handlePlugins() {\n        if (this.commandLine) {\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.CommandLine);\n            this.setPluginOptions(this.element.nativeElement, {\n                dataFilterOutput: this.filterOutput,\n                dataHost: this.host,\n                dataPrompt: this.prompt,\n                dataOutput: this.output,\n                dataUser: this.user,\n            });\n        }\n        if (this.lineHighlight) {\n            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });\n        }\n        if (this.lineNumbers) {\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\n            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });\n        }\n    }\n    setPluginClass(element, plugin) {\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            const classes = plugin instanceof Array ? plugin : [plugin];\n            preElements.item(i).classList.add(...classes);\n        }\n    }\n    setPluginOptions(element, options) {\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            Object.keys(options).forEach(option => {\n                const attributeValue = options[option];\n                if (attributeValue) {\n                    const attributeName = this.toLispCase(option);\n                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());\n                }\n            });\n        }\n    }\n    toLispCase(value) {\n        const upperChars = value.match(/([A-Z])/g);\n        if (!upperChars) {\n            return value;\n        }\n        let str = value.toString();\n        for (let i = 0, n = upperChars.length; i < n; i++) {\n            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\n        }\n        if (str.slice(0, 1) === '-') {\n            str = str.slice(1);\n        }\n        return str;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownComponent, deps: [{ token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MarkdownComponent, isStandalone: true, selector: \"markdown, [markdown]\", inputs: { data: \"data\", src: \"src\", disableSanitizer: \"disableSanitizer\", inline: \"inline\", clipboard: \"clipboard\", clipboardButtonComponent: \"clipboardButtonComponent\", clipboardButtonTemplate: \"clipboardButtonTemplate\", emoji: \"emoji\", katex: \"katex\", katexOptions: \"katexOptions\", mermaid: \"mermaid\", mermaidOptions: \"mermaidOptions\", lineHighlight: \"lineHighlight\", line: \"line\", lineOffset: \"lineOffset\", lineNumbers: \"lineNumbers\", start: \"start\", commandLine: \"commandLine\", filterOutput: \"filterOutput\", host: \"host\", prompt: \"prompt\", output: \"output\", user: \"user\" }, outputs: { error: \"error\", load: \"load\", ready: \"ready\" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: 'markdown, [markdown]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }], propDecorators: { data: [{\n                type: Input\n            }], src: [{\n                type: Input\n            }], disableSanitizer: [{\n                type: Input\n            }], inline: [{\n                type: Input\n            }], clipboard: [{\n                type: Input\n            }], clipboardButtonComponent: [{\n                type: Input\n            }], clipboardButtonTemplate: [{\n                type: Input\n            }], emoji: [{\n                type: Input\n            }], katex: [{\n                type: Input\n            }], katexOptions: [{\n                type: Input\n            }], mermaid: [{\n                type: Input\n            }], mermaidOptions: [{\n                type: Input\n            }], lineHighlight: [{\n                type: Input\n            }], line: [{\n                type: Input\n            }], lineOffset: [{\n                type: Input\n            }], lineNumbers: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], commandLine: [{\n                type: Input\n            }], filterOutput: [{\n                type: Input\n            }], host: [{\n                type: Input\n            }], prompt: [{\n                type: Input\n            }], output: [{\n                type: Input\n            }], user: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], load: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }] } });\n\nclass MarkdownPipe {\n    constructor(domSanitizer, elementRef, markdownService, viewContainerRef, zone) {\n        this.domSanitizer = domSanitizer;\n        this.elementRef = elementRef;\n        this.markdownService = markdownService;\n        this.viewContainerRef = viewContainerRef;\n        this.zone = zone;\n    }\n    async transform(value, options) {\n        if (value == null) {\n            return '';\n        }\n        if (typeof value !== 'string') {\n            console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\n            return value;\n        }\n        const markdown = await this.markdownService.parse(value, options);\n        this.zone.onStable\n            .pipe(first())\n            .subscribe(() => this.markdownService.render(this.elementRef.nativeElement, options, this.viewContainerRef));\n        return this.domSanitizer.bypassSecurityTrustHtml(markdown);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownPipe, deps: [{ token: i2.DomSanitizer }, { token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownPipe, isStandalone: true, name: \"markdown\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'markdown',\n                }]\n        }], ctorParameters: () => [{ type: i2.DomSanitizer }, { type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }, { type: i0.NgZone }] });\n\nfunction provideMarkdown(markdownModuleConfig) {\n    return [\n        MarkdownService,\n        markdownModuleConfig?.loader ?? [],\n        markdownModuleConfig?.clipboardOptions ?? [],\n        markdownModuleConfig?.markedOptions ?? [],\n        markdownModuleConfig?.mermaidOptions ?? [],\n        markdownModuleConfig?.markedExtensions ?? [],\n        {\n            provide: SECURITY_CONTEXT,\n            useValue: markdownModuleConfig?.sanitize ?? SecurityContext.HTML,\n        },\n    ];\n}\n\n;\n;\nconst sharedDeclarations = [\n    ClipboardButtonComponent,\n    LanguagePipe,\n    MarkdownComponent,\n    MarkdownPipe,\n];\nclass MarkdownModule {\n    static forRoot(markdownModuleConfig) {\n        return {\n            ngModule: MarkdownModule,\n            providers: [\n                provideMarkdown(markdownModuleConfig),\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: MarkdownModule,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownModule, imports: [ClipboardButtonComponent,\n            LanguagePipe,\n            MarkdownComponent,\n            MarkdownPipe], exports: [ClipboardButtonComponent,\n            LanguagePipe,\n            MarkdownComponent,\n            MarkdownPipe] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MarkdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: sharedDeclarations,\n                    exports: sharedDeclarations,\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CLIPBOARD_OPTIONS, ClipboardButtonComponent, ExtendedRenderer, KatexSpecificOptions, LanguagePipe, MARKED_EXTENSIONS, MARKED_OPTIONS, MERMAID_OPTIONS, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, PrismPlugin, SECURITY_CONTEXT, errorClipboardNotLoaded, errorClipboardViewContainerRequired, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorMermaidNotLoaded, errorSrcWithoutHttpClient, provideMarkdown };\n\n"],"mappings":"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","names":["options","PrismPlugin","options","inline","mermaid","marked","katex","html"],"x_google_ignoreList":[0,1,2]}