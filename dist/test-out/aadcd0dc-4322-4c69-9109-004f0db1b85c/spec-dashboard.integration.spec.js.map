{
  "version": 3,
  "sources": ["src/app/integration/dashboard.integration.spec.ts"],
  "sourcesContent": ["import { TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { DashboardPage } from '../features/dashboard/dashboard-page/dashboard-page';\r\nimport { AuthService } from '../shared/services/auth.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { By } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  template: `<app-dashboard-page></app-dashboard-page>`,\r\n  standalone: true,\r\n  imports: [DashboardPage]\r\n})\r\nclass TestHostComponent {}\r\n\r\ndescribe('Dashboard Integration', () => {\r\n  let httpMock: HttpTestingController;\r\n  let fixture: any;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        CommonModule,\r\n        TestHostComponent\r\n      ],\r\n      providers: [AuthService]\r\n    }).compileComponents();\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    fixture = TestBed.createComponent(TestHostComponent);\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('should display summary data from user data', fakeAsync(() => {\r\n    // DashboardPage doesn't make HTTP requests, it only gets currentUser from localStorage\r\n    // Simulate user data by setting it in the component\r\n    const dashboard = fixture.debugElement.query(By.directive(DashboardPage)).componentInstance;\r\n    \r\n    // Set mock user data directly on the component\r\n    dashboard.currentUser = { id: '1', email: 'test@example.com' };\r\n    \r\n    tick();\r\n    fixture.detectChanges();\r\n\r\n    expect(dashboard.currentUser).toBeTruthy();\r\n    expect(dashboard.currentUser.email).toBe('test@example.com');\r\n  }));\r\n}); "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA;AACA;AACA;AACA;AACA;AACA;AAOA,QAAM,oBAAN,MAAM,kBAAiB;;AAAjB,wBAAiB,WAAA;MALtB,UAAU;QACT,UAAU;QACV,YAAY;QACZ,SAAS,CAAC,aAAa;OACxB;OACK,iBAAiB;AAEvB,aAAS,yBAAyB,MAAK;AACrC,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;YACA;YACA;;UAEF,WAAW,CAAC,WAAW;SACxB,EAAE,kBAAiB;AACpB,mBAAW,QAAQ,OAAO,qBAAqB;AAC/C,kBAAU,QAAQ,gBAAgB,iBAAiB;AACnD,gBAAQ,cAAa;MACvB,EAAC;AAED,gBAAU,MAAK;AACb,iBAAS,OAAM;MACjB,CAAC;AAED,SAAG,8CAA8C,UAAU,MAAK;AAG9D,cAAM,YAAY,QAAQ,aAAa,MAAM,GAAG,UAAU,aAAa,CAAC,EAAE;AAG1E,kBAAU,cAAc,EAAE,IAAI,KAAK,OAAO,mBAAkB;AAE5D,aAAI;AACJ,gBAAQ,cAAa;AAErB,eAAO,UAAU,WAAW,EAAE,WAAU;AACxC,eAAO,UAAU,YAAY,KAAK,EAAE,KAAK,kBAAkB;MAC7D,CAAC,CAAC;IACJ,CAAC;;;",
  "names": ["init_testing"]
}
