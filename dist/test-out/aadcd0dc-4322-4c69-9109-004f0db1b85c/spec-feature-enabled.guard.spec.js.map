{
  "version": 3,
  "sources": ["src/app/core/guards/feature-enabled.guard.ts", "src/app/core/guards/feature-enabled.guard.spec.ts"],
  "sourcesContent": ["import { inject, PLATFORM_ID } from '@angular/core';\r\nimport { CanActivateFn, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nexport function featureEnabledGuard(featureKey: string): CanActivateFn {\r\n  // inject() is called inside the returned function, which is a valid Angular injection context\r\n  return (route: ActivatedRouteSnapshot, state) => {\r\n    const platformId = inject(PLATFORM_ID);\r\n    const router = inject(Router);\r\n    const isBrowser = isPlatformBrowser(platformId);\r\n    if (!isBrowser) return true; // Allow SSR to render, client will handle redirect\r\n    let features: Record<string, boolean> = {};\r\n    if (isBrowser) {\r\n      try {\r\n        features = JSON.parse(localStorage.getItem('enabled-features') || '{}');\r\n      } catch (e) {\r\n        features = {};\r\n        console.error('Failed to parse enabled-features:', e);\r\n      }\r\n    }\r\n    if (features[featureKey] === false) {\r\n      router.navigateByUrl('/dashboard');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n} ", "import { featureEnabledGuard } from './feature-enabled.guard';\r\nimport { Router } from '@angular/router';\r\nimport { PLATFORM_ID } from '@angular/core';\r\nimport { TestBed } from '@angular/core/testing';\r\n\r\ndescribe('featureEnabledGuard', () => {\r\n  let routerSpy: jasmine.SpyObj<Router>;\r\n  let platformId: Object;\r\n  let originalLocalStorage: any;\r\n  let getItemSpy: jasmine.Spy;\r\n\r\n  beforeAll(() => {\r\n    originalLocalStorage = window.localStorage;\r\n    getItemSpy = jasmine.createSpy('getItem').and.returnValue('{}');\r\n    spyOnProperty(window, 'localStorage').and.returnValue({\r\n      getItem: getItemSpy,\r\n      setItem: jasmine.createSpy('setItem'),\r\n      removeItem: jasmine.createSpy('removeItem'),\r\n      clear: jasmine.createSpy('clear'),\r\n      key: jasmine.createSpy('key').and.returnValue(null),\r\n      length: 0\r\n    });\r\n  });\r\n\r\n  afterAll(() => {\r\n    // Restore the original localStorage object to avoid double-spying errors\r\n    Object.defineProperty(window, 'localStorage', {\r\n      value: originalLocalStorage,\r\n      configurable: true\r\n    });\r\n  });\r\n\r\n  beforeEach(() => {\r\n    routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n    platformId = 'browser';\r\n    getItemSpy.calls.reset();\r\n  });\r\n\r\n  it('should allow SSR to render', () => {\r\n    // Set platformId to 'server' to simulate SSR\r\n    TestBed.overrideProvider(PLATFORM_ID, { useValue: 'server' });\r\n    const result = TestBed.runInInjectionContext(() => {\r\n      const guard = featureEnabledGuard('tasks');\r\n      return guard({} as any, {} as any);\r\n    });\r\n    expect(result).toBeTrue();\r\n  });\r\n\r\n  it('should allow if feature is enabled', () => {\r\n    (window.localStorage.getItem as jasmine.Spy).and.returnValue('{\"tasks\":true}');\r\n    const result = TestBed.runInInjectionContext(() => {\r\n      const guard = featureEnabledGuard('tasks');\r\n      return guard({} as any, {} as any);\r\n    });\r\n    expect(result).toBeTrue();\r\n  });\r\n\r\n  it('should redirect if feature is disabled', () => {\r\n    (window.localStorage.getItem as jasmine.Spy).and.returnValue('{\"tasks\":false}');\r\n    const result = TestBed.runInInjectionContext(() => {\r\n      const guard = featureEnabledGuard('tasks');\r\n      return guard({} as any, {} as any);\r\n    });\r\n    expect(result).toBeFalse();\r\n  });\r\n\r\n  it('should handle invalid localStorage', () => {\r\n    spyOn(console, 'error');\r\n    (window.localStorage.getItem as jasmine.Spy).and.returnValue('not-json');\r\n    const result = TestBed.runInInjectionContext(() => {\r\n      const guard = featureEnabledGuard('tasks');\r\n      return guard({} as any, {} as any);\r\n    });\r\n    expect(result).toBeTrue();\r\n  });\r\n}); "],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEM,SAAU,oBAAoB,YAAkB;AAEpD,SAAO,CAAC,OAA+B,UAAS;AAC9C,UAAM,aAAa,OAAO,WAAW;AACrC,UAAM,SAAS,OAAO,MAAM;AAC5B,UAAM,YAAY,kBAAkB,UAAU;AAC9C,QAAI,CAAC;AAAW,aAAO;AACvB,QAAI,WAAoC,CAAA;AACxC,QAAI,WAAW;AACb,UAAI;AACF,mBAAW,KAAK,MAAM,aAAa,QAAQ,kBAAkB,KAAK,IAAI;MACxE,SAAS,GAAG;AACV,mBAAW,CAAA;AACX,gBAAQ,MAAM,qCAAqC,CAAC;MACtD;IACF;AACA,QAAI,SAAS,UAAU,MAAM,OAAO;AAClC,aAAO,cAAc,YAAY;AACjC,aAAO;IACT;AACA,WAAO;EACT;AACF;;;ACxBA;AACA;AAEA,SAAS,uBAAuB,MAAK;AACnC,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,YAAU,MAAK;AACb,2BAAuB,OAAO;AAC9B,iBAAa,QAAQ,UAAU,SAAS,EAAE,IAAI,YAAY,IAAI;AAC9D,kBAAc,QAAQ,cAAc,EAAE,IAAI,YAAY;MACpD,SAAS;MACT,SAAS,QAAQ,UAAU,SAAS;MACpC,YAAY,QAAQ,UAAU,YAAY;MAC1C,OAAO,QAAQ,UAAU,OAAO;MAChC,KAAK,QAAQ,UAAU,KAAK,EAAE,IAAI,YAAY,IAAI;MAClD,QAAQ;KACT;EACH,CAAC;AAED,WAAS,MAAK;AAEZ,WAAO,eAAe,QAAQ,gBAAgB;MAC5C,OAAO;MACP,cAAc;KACf;EACH,CAAC;AAED,aAAW,MAAK;AACd,gBAAY,QAAQ,aAAa,UAAU,CAAC,eAAe,CAAC;AAC5D,iBAAa;AACb,eAAW,MAAM,MAAK;EACxB,CAAC;AAED,KAAG,8BAA8B,MAAK;AAEpC,YAAQ,iBAAiB,aAAa,EAAE,UAAU,SAAQ,CAAE;AAC5D,UAAM,SAAS,QAAQ,sBAAsB,MAAK;AAChD,YAAM,QAAQ,oBAAoB,OAAO;AACzC,aAAO,MAAM,CAAA,GAAW,CAAA,CAAS;IACnC,CAAC;AACD,WAAO,MAAM,EAAE,SAAQ;EACzB,CAAC;AAED,KAAG,sCAAsC,MAAK;AAC3C,WAAO,aAAa,QAAwB,IAAI,YAAY,gBAAgB;AAC7E,UAAM,SAAS,QAAQ,sBAAsB,MAAK;AAChD,YAAM,QAAQ,oBAAoB,OAAO;AACzC,aAAO,MAAM,CAAA,GAAW,CAAA,CAAS;IACnC,CAAC;AACD,WAAO,MAAM,EAAE,SAAQ;EACzB,CAAC;AAED,KAAG,0CAA0C,MAAK;AAC/C,WAAO,aAAa,QAAwB,IAAI,YAAY,iBAAiB;AAC9E,UAAM,SAAS,QAAQ,sBAAsB,MAAK;AAChD,YAAM,QAAQ,oBAAoB,OAAO;AACzC,aAAO,MAAM,CAAA,GAAW,CAAA,CAAS;IACnC,CAAC;AACD,WAAO,MAAM,EAAE,UAAS;EAC1B,CAAC;AAED,KAAG,sCAAsC,MAAK;AAC5C,UAAM,SAAS,OAAO;AACrB,WAAO,aAAa,QAAwB,IAAI,YAAY,UAAU;AACvE,UAAM,SAAS,QAAQ,sBAAsB,MAAK;AAChD,YAAM,QAAQ,oBAAoB,OAAO;AACzC,aAAO,MAAM,CAAA,GAAW,CAAA,CAAS;IACnC,CAAC;AACD,WAAO,MAAM,EAAE,SAAQ;EACzB,CAAC;AACH,CAAC;",
  "names": []
}
