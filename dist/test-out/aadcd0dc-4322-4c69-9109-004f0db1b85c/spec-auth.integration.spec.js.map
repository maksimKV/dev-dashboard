{
  "version": 3,
  "sources": ["angular:jit:style:inline:src\\app\\shared\\components\\login\\login.component.ts;CiAgICAubG9naW4tY29udGFpbmVyIHsKICAgICAgZGlzcGxheTogZmxleDsKICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoOwogICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjNjY3ZWVhIDAlLCAjNzY0YmEyIDEwMCUpOwogICAgICBwYWRkaW5nOiAyMHB4OwogICAgfQogICAgCiAgICAubG9naW4tY2FyZCB7CiAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICBwYWRkaW5nOiA0MHB4OwogICAgICBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICBib3gtc2hhZG93OiAwIDEwcHggMzBweCByZ2JhKDAsIDAsIDAsIDAuMik7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBtYXgtd2lkdGg6IDQwMHB4OwogICAgfQogICAgCiAgICBoMiB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDsKICAgICAgY29sb3I6ICMzMzM7CiAgICAgIGZvbnQtc2l6ZTogMjhweDsKICAgICAgZm9udC13ZWlnaHQ6IDYwMDsKICAgIH0KICAgIAogICAgLmZvcm0tZ3JvdXAgewogICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgfQogICAgCiAgICBsYWJlbCB7CiAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICBtYXJnaW4tYm90dG9tOiA4cHg7CiAgICAgIGNvbG9yOiAjNTU1OwogICAgICBmb250LXdlaWdodDogNTAwOwogICAgfQogICAgCiAgICAuZm9ybS1jb250cm9sIHsKICAgICAgd2lkdGg6IDEwMCU7CiAgICAgIHBhZGRpbmc6IDEycHggMTZweDsKICAgICAgYm9yZGVyOiAycHggc29saWQgI2UxZTVlOTsKICAgICAgYm9yZGVyLXJhZGl1czogOHB4OwogICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjNzIGVhc2U7CiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICB9CiAgICAKICAgIC5mb3JtLWNvbnRyb2w6Zm9jdXMgewogICAgICBvdXRsaW5lOiBub25lOwogICAgICBib3JkZXItY29sb3I6ICM2NjdlZWE7CiAgICB9CiAgICAKICAgIC5mb3JtLWFjdGlvbnMgewogICAgICBtYXJnaW4tdG9wOiAzMHB4OwogICAgfQogICAgCiAgICAuYnRuLXByaW1hcnkgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgcGFkZGluZzogMTRweDsKICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgIzY2N2VlYSAwJSwgIzc2NGJhMiAxMDAlKTsKICAgICAgY29sb3I6IHdoaXRlOwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsKICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICBmb250LXdlaWdodDogNjAwOwogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7CiAgICB9CiAgICAKICAgIC5idG4tcHJpbWFyeTpob3Zlcjpub3QoOmRpc2FibGVkKSB7CiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTsKICAgIH0KICAgIAogICAgLmJ0bi1wcmltYXJ5OmRpc2FibGVkIHsKICAgICAgb3BhY2l0eTogMC42OwogICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwogICAgfQogICAgCiAgICAudG9nZ2xlLW1vZGUgewogICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICB9CiAgICAKICAgIC5idG4tbGluayB7CiAgICAgIGJhY2tncm91bmQ6IG5vbmU7CiAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgY29sb3I6ICM2NjdlZWE7CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgIH0KICAgIAogICAgLmJ0bi1saW5rOmhvdmVyIHsKICAgICAgY29sb3I6ICM3NjRiYTI7CiAgICB9CiAgICAKICAgIC5lcnJvci1tZXNzYWdlIHsKICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgICAgcGFkZGluZzogMTJweDsKICAgICAgYmFja2dyb3VuZDogI2ZlZTsKICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZjYzsKICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICBjb2xvcjogI2MzMzsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQogICAgCiAgICAuc3VjY2Vzcy1tZXNzYWdlIHsKICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgICAgcGFkZGluZzogMTJweDsKICAgICAgYmFja2dyb3VuZDogI2VmZTsKICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NmYzsKICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICBjb2xvcjogIzNjMzsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQogIA==", "src/app/shared/components/login/login.component.ts", "angular:jit:style:inline:src\\app\\shared\\components\\email-verification\\email-verification.component.ts;CiAgICAudmVyaWZpY2F0aW9uLWNvbnRhaW5lciB7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICBtaW4taGVpZ2h0OiAxMDB2aDsKICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgIzY2N2VlYSAwJSwgIzc2NGJhMiAxMDAlKTsKICAgICAgcGFkZGluZzogMjBweDsKICAgIH0KICAgIAogICAgLnZlcmlmaWNhdGlvbi1jYXJkIHsKICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgIHBhZGRpbmc6IDQwcHg7CiAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7CiAgICAgIGJveC1zaGFkb3c6IDAgMTBweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4yKTsKICAgICAgd2lkdGg6IDEwMCU7CiAgICAgIG1heC13aWR0aDogNDAwcHg7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIH0KICAgIAogICAgaDIgewogICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICBjb2xvcjogIzMzMzsKICAgICAgZm9udC1zaXplOiAyNHB4OwogICAgICBmb250LXdlaWdodDogNjAwOwogICAgfQogICAgCiAgICBwIHsKICAgICAgY29sb3I6ICM2NjY7CiAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgICB9CiAgICAKICAgIC5sb2FkaW5nLXNwaW5uZXIgewogICAgICB3aWR0aDogNDBweDsKICAgICAgaGVpZ2h0OiA0MHB4OwogICAgICBib3JkZXI6IDRweCBzb2xpZCAjZjNmM2YzOwogICAgICBib3JkZXItdG9wOiA0cHggc29saWQgIzY2N2VlYTsKICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlOwogICAgICBtYXJnaW46IDAgYXV0byAyMHB4OwogICAgfQogICAgCiAgICBAa2V5ZnJhbWVzIHNwaW4gewogICAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9CiAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9CiAgICB9CiAgICAKICAgIC5lcnJvci1zdGF0ZSB7CiAgICAgIGNvbG9yOiAjYzMzOwogICAgfQogICAgCiAgICAuc3VjY2Vzcy1zdGF0ZSB7CiAgICAgIGNvbG9yOiAjM2MzOwogICAgfQogICAgCiAgICAuYnRuLXByaW1hcnkgewogICAgICBwYWRkaW5nOiAxMnB4IDI0cHg7CiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM2NjdlZWEgMCUsICM3NjRiYTIgMTAwJSk7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgYm9yZGVyOiBub25lOwogICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgZm9udC13ZWlnaHQ6IDYwMDsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlOwogICAgfQogICAgCiAgICAuYnRuLXByaW1hcnk6aG92ZXIgewogICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7CiAgICB9CiAg", "src/app/shared/components/email-verification/email-verification.component.ts", "src/app/integration/auth.integration.spec.ts"],
  "sourcesContent": ["/* angular:styles/component:scss;b533c7ec9c84a71a9a791f3b5d5960cba14f4fc221bfd165b1a09f1be2d882eb;C:\\Users\\Max\\Documents\\GitHub\\dev-dashboard\\src\\app\\shared\\components\\login\\login.component.ts */\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background:\n    linear-gradient(\n      135deg,\n      #667eea 0%,\n      #764ba2 100%);\n  padding: 20px;\n}\n.login-card {\n  background: white;\n  padding: 40px;\n  border-radius: 12px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  width: 100%;\n  max-width: 400px;\n}\nh2 {\n  text-align: center;\n  margin-bottom: 30px;\n  color: #333;\n  font-size: 28px;\n  font-weight: 600;\n}\n.form-group {\n  margin-bottom: 20px;\n}\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  color: #555;\n  font-weight: 500;\n}\n.form-control {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #e1e5e9;\n  border-radius: 8px;\n  font-size: 16px;\n  transition: border-color 0.3s ease;\n  box-sizing: border-box;\n}\n.form-control:focus {\n  outline: none;\n  border-color: #667eea;\n}\n.form-actions {\n  margin-top: 30px;\n}\n.btn-primary {\n  width: 100%;\n  padding: 14px;\n  background:\n    linear-gradient(\n      135deg,\n      #667eea 0%,\n      #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n}\n.btn-primary:hover:not(:disabled) {\n  transform: translateY(-2px);\n}\n.btn-primary:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n.toggle-mode {\n  text-align: center;\n  margin-top: 20px;\n}\n.btn-link {\n  background: none;\n  border: none;\n  color: #667eea;\n  cursor: pointer;\n  font-size: 14px;\n  text-decoration: underline;\n}\n.btn-link:hover {\n  color: #764ba2;\n}\n.error-message {\n  margin-top: 20px;\n  padding: 12px;\n  background: #fee;\n  border: 1px solid #fcc;\n  border-radius: 6px;\n  color: #c33;\n  text-align: center;\n}\n.success-message {\n  margin-top: 20px;\n  padding: 12px;\n  background: #efe;\n  border: 1px solid #cfc;\n  border-radius: 6px;\n  color: #3c3;\n  text-align: center;\n}\n/*# sourceMappingURL=login.component.css.map */\n", "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService, ResendVerificationResponse } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"login-container\">\r\n      <div class=\"login-card\">\r\n        <h2>{{ isLoginMode ? 'Login' : 'Register' }}</h2>\r\n        \r\n        <form (ngSubmit)=\"onSubmit()\" #loginForm=\"ngForm\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              [(ngModel)]=\"email\"\r\n              required\r\n              class=\"form-control\"\r\n              placeholder=\"Enter email address\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              [(ngModel)]=\"password\"\r\n              required\r\n              class=\"form-control\"\r\n              placeholder=\"Enter password\"\r\n              minlength=\"6\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-actions\">\r\n            <button type=\"submit\" [disabled]=\"!loginForm.valid || isLoading\" class=\"btn-primary\">\r\n              {{ isLoading ? 'Loading...' : (isLoginMode ? 'Login' : 'Register') }}\r\n            </button>\r\n          </div>\r\n        </form>\r\n        \r\n        <div class=\"toggle-mode\">\r\n          <button type=\"button\" (click)=\"toggleMode()\" class=\"btn-link\">\r\n            {{ isLoginMode ? 'Need an account? Register' : 'Have an account? Login' }}\r\n          </button>\r\n        </div>\r\n        \r\n        <div *ngIf=\"error\" class=\"error-message\">\r\n          {{ error }}\r\n          <button *ngIf=\"showResend\" (click)=\"resendVerification()\" class=\"btn-link\" [disabled]=\"isLoading\">\r\n            Resend verification email\r\n          </button>\r\n        </div>\r\n        \r\n        <div *ngIf=\"success\" class=\"success-message\">\r\n          {{ success }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .login-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      min-height: 100vh;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      padding: 20px;\r\n    }\r\n    \r\n    .login-card {\r\n      background: white;\r\n      padding: 40px;\r\n      border-radius: 12px;\r\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n      width: 100%;\r\n      max-width: 400px;\r\n    }\r\n    \r\n    h2 {\r\n      text-align: center;\r\n      margin-bottom: 30px;\r\n      color: #333;\r\n      font-size: 28px;\r\n      font-weight: 600;\r\n    }\r\n    \r\n    .form-group {\r\n      margin-bottom: 20px;\r\n    }\r\n    \r\n    label {\r\n      display: block;\r\n      margin-bottom: 8px;\r\n      color: #555;\r\n      font-weight: 500;\r\n    }\r\n    \r\n    .form-control {\r\n      width: 100%;\r\n      padding: 12px 16px;\r\n      border: 2px solid #e1e5e9;\r\n      border-radius: 8px;\r\n      font-size: 16px;\r\n      transition: border-color 0.3s ease;\r\n      box-sizing: border-box;\r\n    }\r\n    \r\n    .form-control:focus {\r\n      outline: none;\r\n      border-color: #667eea;\r\n    }\r\n    \r\n    .form-actions {\r\n      margin-top: 30px;\r\n    }\r\n    \r\n    .btn-primary {\r\n      width: 100%;\r\n      padding: 14px;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      color: white;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-size: 16px;\r\n      font-weight: 600;\r\n      cursor: pointer;\r\n      transition: transform 0.2s ease;\r\n    }\r\n    \r\n    .btn-primary:hover:not(:disabled) {\r\n      transform: translateY(-2px);\r\n    }\r\n    \r\n    .btn-primary:disabled {\r\n      opacity: 0.6;\r\n      cursor: not-allowed;\r\n    }\r\n    \r\n    .toggle-mode {\r\n      text-align: center;\r\n      margin-top: 20px;\r\n    }\r\n    \r\n    .btn-link {\r\n      background: none;\r\n      border: none;\r\n      color: #667eea;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n      text-decoration: underline;\r\n    }\r\n    \r\n    .btn-link:hover {\r\n      color: #764ba2;\r\n    }\r\n    \r\n    .error-message {\r\n      margin-top: 20px;\r\n      padding: 12px;\r\n      background: #fee;\r\n      border: 1px solid #fcc;\r\n      border-radius: 6px;\r\n      color: #c33;\r\n      text-align: center;\r\n    }\r\n    \r\n    .success-message {\r\n      margin-top: 20px;\r\n      padding: 12px;\r\n      background: #efe;\r\n      border: 1px solid #cfc;\r\n      border-radius: 6px;\r\n      color: #3c3;\r\n      text-align: center;\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent {\r\n  email = '';\r\n  password = '';\r\n  isLoginMode = true;\r\n  isLoading = false;\r\n  error = '';\r\n  success = '';\r\n  showResend = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  toggleMode() {\r\n    this.isLoginMode = !this.isLoginMode;\r\n    this.error = '';\r\n    this.success = '';\r\n  }\r\n\r\n  onSubmit() {\r\n    if (!this.email || !this.password) {\r\n      this.error = 'Please fill in all fields';\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n    this.showResend = false;\r\n\r\n    const authObservable = this.isLoginMode \r\n      ? this.authService.login(this.email, this.password)\r\n      : this.authService.register(this.email, this.password);\r\n\r\n    authObservable.subscribe({\r\n      next: (response) => {\r\n        if (this.isLoginMode) {\r\n          this.authService.setAuth(response.token, response.user);\r\n          this.success = response.message;\r\n          this.isLoading = false;\r\n          setTimeout(() => {\r\n            this.router.navigate(['/dashboard']);\r\n          }, 1000);\r\n        } else {\r\n          // Registration: show message, do not log in or redirect\r\n          this.success = response.message;\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.error = error.error?.error || 'An error occurred';\r\n        this.isLoading = false;\r\n        // Show resend button if error is unverified email\r\n        if (this.isLoginMode && this.error.toLowerCase().includes('verify your email')) {\r\n          this.showResend = true;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  resendVerification() {\r\n    this.isLoading = true;\r\n    this.error = '';\r\n    this.success = '';\r\n    this.authService.resendVerification(this.email).subscribe({\r\n      next: (res: ResendVerificationResponse) => {\r\n        this.success = res.message;\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        this.error = err.error?.error || 'Failed to resend verification email.';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n} ", "/* angular:styles/component:scss;17224470f25ae8658cf5665454e6d5cf66628c6614a8872aae0e44a1b975db83;C:\\Users\\Max\\Documents\\GitHub\\dev-dashboard\\src\\app\\shared\\components\\email-verification\\email-verification.component.ts */\n.verification-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background:\n    linear-gradient(\n      135deg,\n      #667eea 0%,\n      #764ba2 100%);\n  padding: 20px;\n}\n.verification-card {\n  background: white;\n  padding: 40px;\n  border-radius: 12px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  width: 100%;\n  max-width: 400px;\n  text-align: center;\n}\nh2 {\n  margin-bottom: 20px;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n}\np {\n  color: #666;\n  margin-bottom: 20px;\n  line-height: 1.5;\n}\n.loading-spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #667eea;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin: 0 auto 20px;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n.error-state {\n  color: #c33;\n}\n.success-state {\n  color: #3c3;\n}\n.btn-primary {\n  padding: 12px 24px;\n  background:\n    linear-gradient(\n      135deg,\n      #667eea 0%,\n      #764ba2 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n}\n.btn-primary:hover {\n  transform: translateY(-2px);\n}\n/*# sourceMappingURL=email-verification.component.css.map */\n", "import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\ninterface VerifyEmailResponse { message: string; }\r\n\r\n@Component({\r\n  selector: 'app-email-verification',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div class=\"verification-container\">\r\n      <div class=\"verification-card\">\r\n        <div *ngIf=\"!isLoading && !error && !success\">\r\n          <h2>Verifying Your Email</h2>\r\n          <p>Please wait while we verify your email address...</p>\r\n        </div>\r\n        \r\n        <div *ngIf=\"isLoading\">\r\n          <h2>Verifying Your Email</h2>\r\n          <div class=\"loading-spinner\"></div>\r\n          <p>Please wait...</p>\r\n        </div>\r\n        \r\n        <div *ngIf=\"error\" class=\"error-state\">\r\n          <h2>Verification Failed</h2>\r\n          <p>{{ error }}</p>\r\n          <button (click)=\"goToLogin()\" class=\"btn-primary\">Go to Login</button>\r\n        </div>\r\n        \r\n        <div *ngIf=\"success\" class=\"success-state\">\r\n          <h2>Email Verified Successfully!</h2>\r\n          <p>{{ success }}</p>\r\n          <button (click)=\"goToLogin()\" class=\"btn-primary\">Go to Login</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .verification-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      min-height: 100vh;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      padding: 20px;\r\n    }\r\n    \r\n    .verification-card {\r\n      background: white;\r\n      padding: 40px;\r\n      border-radius: 12px;\r\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n      width: 100%;\r\n      max-width: 400px;\r\n      text-align: center;\r\n    }\r\n    \r\n    h2 {\r\n      margin-bottom: 20px;\r\n      color: #333;\r\n      font-size: 24px;\r\n      font-weight: 600;\r\n    }\r\n    \r\n    p {\r\n      color: #666;\r\n      margin-bottom: 20px;\r\n      line-height: 1.5;\r\n    }\r\n    \r\n    .loading-spinner {\r\n      width: 40px;\r\n      height: 40px;\r\n      border: 4px solid #f3f3f3;\r\n      border-top: 4px solid #667eea;\r\n      border-radius: 50%;\r\n      animation: spin 1s linear infinite;\r\n      margin: 0 auto 20px;\r\n    }\r\n    \r\n    @keyframes spin {\r\n      0% { transform: rotate(0deg); }\r\n      100% { transform: rotate(360deg); }\r\n    }\r\n    \r\n    .error-state {\r\n      color: #c33;\r\n    }\r\n    \r\n    .success-state {\r\n      color: #3c3;\r\n    }\r\n    \r\n    .btn-primary {\r\n      padding: 12px 24px;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      color: white;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-size: 16px;\r\n      font-weight: 600;\r\n      cursor: pointer;\r\n      transition: transform 0.2s ease;\r\n    }\r\n    \r\n    .btn-primary:hover {\r\n      transform: translateY(-2px);\r\n    }\r\n  `]\r\n})\r\nexport class EmailVerificationComponent implements OnInit {\r\n  isLoading = true;\r\n  error = '';\r\n  success = '';\r\n  private apiUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.verifyEmail();\r\n  }\r\n\r\n  verifyEmail() {\r\n    const token = this.route.snapshot.queryParams['token'];\r\n    \r\n    if (!token) {\r\n      this.error = 'Invalid verification link. Please check your email and try again.';\r\n      this.isLoading = false;\r\n      return;\r\n    }\r\n\r\n    this.http.get<VerifyEmailResponse>(`${this.apiUrl}/auth/verify-email?token=${token}`).subscribe({\r\n      next: (response: VerifyEmailResponse) => {\r\n        this.success = response.message;\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.error = error.error?.error || 'Verification failed. Please try again.';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  goToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n} ", "import { TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { AuthService } from '../shared/services/auth.service';\r\nimport { LoginComponent } from '../shared/components/login/login.component';\r\nimport { EmailVerificationComponent } from '../shared/components/email-verification/email-verification.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { By } from '@angular/platform-browser';\r\nimport { Component } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  template: `\r\n    <app-login></app-login>\r\n    <app-email-verification></app-email-verification>\r\n  `\r\n})\r\nclass TestHostComponent {}\r\n\r\ndescribe('Auth Integration', () => {\r\n  let httpMock: HttpTestingController;\r\n  let authService: AuthService;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        FormsModule,\r\n        LoginComponent,\r\n        EmailVerificationComponent,\r\n        TestHostComponent\r\n      ],\r\n      providers: [AuthService]\r\n    }).compileComponents();\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    authService = TestBed.inject(AuthService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('should register, resend verification, and login a user', fakeAsync(() => {\r\n    // Simulate registration\r\n    let registered = false;\r\n    authService.register('test@example.com', 'Password123!').subscribe(res => {\r\n      registered = true;\r\n    });\r\n    const req = httpMock.expectOne(r => r.url.startsWith(`${environment.apiUrl}/auth/register`));\r\n    expect(req.request.method).toBe('POST');\r\n    req.flush({ message: 'Registered', token: 'token123', user: { id: '1', email: 'test@example.com' } });\r\n    tick();\r\n    expect(registered).toBeTrue();\r\n\r\n    // Simulate resend verification\r\n    let resent = false;\r\n    authService.resendVerification('test@example.com').subscribe(res => {\r\n      resent = true;\r\n    });\r\n    const req2 = httpMock.expectOne(r => r.url.startsWith(`${environment.apiUrl}/auth/resend-verification`));\r\n    expect(req2.request.method).toBe('POST');\r\n    req2.flush({ message: 'Verification sent' });\r\n    tick();\r\n    expect(resent).toBeTrue();\r\n\r\n    // Simulate login\r\n    let loggedIn = false;\r\n    authService.login('test@example.com', 'Password123!').subscribe(res => {\r\n      loggedIn = true;\r\n    });\r\n    const req3 = httpMock.expectOne(r => r.url.startsWith(`${environment.apiUrl}/auth/login`));\r\n    expect(req3.request.method).toBe('POST');\r\n    req3.flush({ message: 'Logged in', token: 'jwt-token', user: { id: '1', email: 'test@example.com' } });\r\n    tick();\r\n    expect(loggedIn).toBeTrue();\r\n  }));\r\n\r\n  it('should persist auth state after login', fakeAsync(() => {\r\n    // Mock localStorage for auth_token and auth_user\r\n    spyOn(localStorage, 'setItem').and.callFake((key: string, value: string) => {\r\n      (localStorage as any)[key] = value;\r\n    });\r\n    spyOn(localStorage, 'getItem').and.callFake((key: string) => {\r\n      return (localStorage as any)[key] || null;\r\n    });\r\n    // Simulate login\r\n    authService.login('test@example.com', 'Password123!').subscribe();\r\n    const req = httpMock.expectOne(r => r.url.startsWith(`${environment.apiUrl}/auth/login`));\r\n    req.flush({ message: 'Logged in', token: 'jwt-token', user: { id: '1', email: 'test@example.com' } });\r\n    tick();\r\n    // Simulate setting auth state after login\r\n    authService.setAuth('jwt-token', { id: '1', email: 'test@example.com' });\r\n    // Simulate page reload by creating a new instance\r\n    const newAuthService = TestBed.inject(AuthService);\r\n    expect(newAuthService.isAuthenticated()).toBeTrue();\r\n  }));\r\n}); "],
  "mappings": "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",
  "names": ["LoginComponent", "EmailVerificationComponent", "init_testing", "init_login_component", "init_email_verification_component"]
}
