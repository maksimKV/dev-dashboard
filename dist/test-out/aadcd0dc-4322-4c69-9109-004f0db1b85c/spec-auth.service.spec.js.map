{
  "version": 3,
  "sources": ["src/app/shared/services/auth.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\r\nimport { AuthService, User, AuthResponse, UserData, FocusTimer, Preferences } from './auth.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\n\r\nconst mockUser: User = { id: '1', email: 'test@example.com' };\r\nconst mockAuthResponse: AuthResponse = { message: 'ok', token: 'token', user: mockUser };\r\nconst mockUserData: UserData = {\r\n  kanbanTasks: { todo: [], inProgress: [], done: [] },\r\n  focusTimer: {\r\n    workDuration: 25, breakDuration: 5, timeLeft: 1500, isRunning: false, isWork: true, completedFocusSessions: 0, totalWorkSeconds: 0\r\n  },\r\n  markdownNote: '',\r\n  snippets: [],\r\n  preferences: {\r\n    defaultLandingPage: 'dashboard', focusDuration: 25, breakDuration: 5,\r\n    features: { tasks: true, notes: true, timer: true, snippets: true, stats: true },\r\n    sidebarPosition: 'left', compactMode: false, fontSize: 'medium', highContrast: false, keyboardShortcuts: true\r\n  }\r\n};\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n  let http: jasmine.SpyObj<HttpClient>;\r\n\r\n  beforeEach(() => {\r\n    const httpSpy = jasmine.createSpyObj('HttpClient', ['post', 'get', 'put']);\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        { provide: HttpClient, useValue: httpSpy }\r\n      ]\r\n    });\r\n    service = TestBed.inject(AuthService);\r\n    http = TestBed.inject(HttpClient) as jasmine.SpyObj<HttpClient>;\r\n  });\r\n\r\n  it('should register a user', () => {\r\n    http.post.and.returnValue(of(mockAuthResponse));\r\n    service.register('test@example.com', 'password').subscribe(res => {\r\n      expect(res).toEqual(mockAuthResponse);\r\n    });\r\n    expect(http.post).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should login a user', () => {\r\n    http.post.and.returnValue(of(mockAuthResponse));\r\n    service.login('test@example.com', 'password').subscribe(res => {\r\n      expect(res).toEqual(mockAuthResponse);\r\n    });\r\n    expect(http.post).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should logout and clear auth', () => {\r\n    service.setAuth('token', mockUser);\r\n    service.logout();\r\n    expect(service.getCurrentUser()).toBeNull();\r\n    expect(service.getToken()).toBeNull();\r\n    expect(service.isAuthenticated()).toBeFalse();\r\n  });\r\n\r\n  it('should set and get auth', () => {\r\n    service.setAuth('token', mockUser);\r\n    expect(service.getCurrentUser()).toEqual(mockUser);\r\n    expect(service.getToken()).toBe('token');\r\n    expect(service.isAuthenticated()).toBeTrue();\r\n  });\r\n\r\n  it('should get user data', () => {\r\n    http.get.and.returnValue(of(mockUserData));\r\n    service.getUserData().subscribe(data => {\r\n      expect(data).toEqual(mockUserData);\r\n    });\r\n    expect(http.get).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update kanban tasks', () => {\r\n    http.put.and.returnValue(of(void 0));\r\n    service.updateKanbanTasks({ todo: [], inProgress: [], done: [] }).subscribe(res => {\r\n      expect(res).toBeUndefined();\r\n    });\r\n    expect(http.put).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update focus timer', () => {\r\n    http.put.and.returnValue(of(void 0));\r\n    service.updateFocusTimer(mockUserData.focusTimer).subscribe(res => {\r\n      expect(res).toBeUndefined();\r\n    });\r\n    expect(http.put).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update markdown note', () => {\r\n    http.put.and.returnValue(of(void 0));\r\n    service.updateMarkdownNote('note').subscribe(res => {\r\n      expect(res).toBeUndefined();\r\n    });\r\n    expect(http.put).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update snippets', () => {\r\n    http.put.and.returnValue(of(void 0));\r\n    service.updateSnippets([]).subscribe(res => {\r\n      expect(res).toBeUndefined();\r\n    });\r\n    expect(http.put).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should update preferences', () => {\r\n    http.put.and.returnValue(of(void 0));\r\n    service.updatePreferences(mockUserData.preferences).subscribe(res => {\r\n      expect(res).toBeUndefined();\r\n    });\r\n    expect(http.put).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should resend verification', () => {\r\n    const mockResendVerificationResponse = { message: 'Verification email sent' };\r\n    http.post.and.returnValue(of(mockResendVerificationResponse));\r\n    service.resendVerification('test@example.com').subscribe(res => {\r\n      expect(res).toEqual(mockResendVerificationResponse);\r\n    });\r\n    expect(http.post).toHaveBeenCalled();\r\n  });\r\n}); "],
  "mappings": "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",
  "names": []
}
