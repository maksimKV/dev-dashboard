{
  "version": 3,
  "sources": ["src/app/features/tasks/kanban-board/kanban-board.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { KanbanBoard } from './kanban-board';\r\nimport { AuthService } from '../../../shared/services/auth.service';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\ndescribe('KanbanBoard', () => {\r\n  let component: KanbanBoard;\r\n  let fixture: ComponentFixture<KanbanBoard>;\r\n  let authServiceSpy: jasmine.SpyObj<AuthService>;\r\n  let cdrSpy: jasmine.SpyObj<ChangeDetectorRef>;\r\n\r\n  beforeEach(async () => {\r\n    authServiceSpy = {\r\n      updateKanbanTasks: jasmine.createSpy('updateKanbanTasks').and.returnValue(of({})),\r\n      getUserData: jasmine.createSpy('getUserData').and.returnValue(of({ kanbanTasks: { todo: [], inProgress: [], done: [] } })),\r\n      isAuthenticated$: of(true)\r\n    } as any;\r\n    cdrSpy = jasmine.createSpyObj('ChangeDetectorRef', ['detectChanges']);\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        KanbanBoard,\r\n        CommonModule,\r\n        DragDropModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        FormsModule\r\n      ],\r\n      providers: [\r\n        { provide: AuthService, useValue: authServiceSpy },\r\n        { provide: ChangeDetectorRef, useValue: cdrSpy },\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(KanbanBoard);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should add a task', () => {\r\n    component.newTaskTitle = 'Test Task';\r\n    component.newTaskDescription = 'Desc';\r\n    spyOn(component, 'saveTasks');\r\n    component.addTask();\r\n    expect(component.todo.length).toBe(1);\r\n    expect(component.saveTasks).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should not add a task with empty title', () => {\r\n    component.newTaskTitle = '   ';\r\n    spyOn(component, 'saveTasks');\r\n    component.addTask();\r\n    expect(component.todo.length).toBe(0);\r\n    expect(component.saveTasks).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should delete a task', () => {\r\n    component.todo = [{ id: '1', title: 'A', description: '' }];\r\n    spyOn(component, 'saveTasks');\r\n    component.deleteTask(component.todo, 0);\r\n    expect(component.todo.length).toBe(0);\r\n    expect(component.saveTasks).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call saveTasks on drop', () => {\r\n    spyOn(component, 'saveTasks');\r\n    const event = {\r\n      previousContainer: { data: component.todo },\r\n      container: { data: component.todo },\r\n      previousIndex: 0,\r\n      currentIndex: 0\r\n    } as any;\r\n    component.drop(event);\r\n    expect(component.saveTasks).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should call saveTasks and loadTasks', () => {\r\n    authServiceSpy.updateKanbanTasks.and.returnValue(of(void 0));\r\n    authServiceSpy.getUserData.and.returnValue(of({ kanbanTasks: { todo: [], inProgress: [], done: [] } } as any));\r\n    component.isBrowser = true;\r\n    component.saveTasks();\r\n    expect(authServiceSpy.updateKanbanTasks).toHaveBeenCalled();\r\n    component.loadTasks();\r\n    expect(authServiceSpy.getUserData).toHaveBeenCalled();\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,aAAS,eAAe,MAAK;AAC3B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,yBAAiB;UACf,mBAAmB,QAAQ,UAAU,mBAAmB,EAAE,IAAI,YAAY,GAAG,CAAA,CAAE,CAAC;UAChF,aAAa,QAAQ,UAAU,aAAa,EAAE,IAAI,YAAY,GAAG,EAAE,aAAa,EAAE,MAAM,CAAA,GAAI,YAAY,CAAA,GAAI,MAAM,CAAA,EAAE,EAAE,CAAE,CAAC;UACzH,kBAAkB,GAAG,IAAI;;AAE3B,iBAAS,QAAQ,aAAa,qBAAqB,CAAC,eAAe,CAAC;AACpE,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;UAEF,WAAW;YACT,EAAE,SAAS,aAAa,UAAU,eAAc;YAChD,EAAE,SAAS,mBAAmB,UAAU,OAAM;;SAEjD,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,WAAW;AAC7C,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,qBAAqB,MAAK;AAC3B,kBAAU,eAAe;AACzB,kBAAU,qBAAqB;AAC/B,cAAM,WAAW,WAAW;AAC5B,kBAAU,QAAO;AACjB,eAAO,UAAU,KAAK,MAAM,EAAE,KAAK,CAAC;AACpC,eAAO,UAAU,SAAS,EAAE,iBAAgB;MAC9C,CAAC;AAED,SAAG,0CAA0C,MAAK;AAChD,kBAAU,eAAe;AACzB,cAAM,WAAW,WAAW;AAC5B,kBAAU,QAAO;AACjB,eAAO,UAAU,KAAK,MAAM,EAAE,KAAK,CAAC;AACpC,eAAO,UAAU,SAAS,EAAE,IAAI,iBAAgB;MAClD,CAAC;AAED,SAAG,wBAAwB,MAAK;AAC9B,kBAAU,OAAO,CAAC,EAAE,IAAI,KAAK,OAAO,KAAK,aAAa,GAAE,CAAE;AAC1D,cAAM,WAAW,WAAW;AAC5B,kBAAU,WAAW,UAAU,MAAM,CAAC;AACtC,eAAO,UAAU,KAAK,MAAM,EAAE,KAAK,CAAC;AACpC,eAAO,UAAU,SAAS,EAAE,iBAAgB;MAC9C,CAAC;AAED,SAAG,iCAAiC,MAAK;AACvC,cAAM,WAAW,WAAW;AAC5B,cAAM,QAAQ;UACZ,mBAAmB,EAAE,MAAM,UAAU,KAAI;UACzC,WAAW,EAAE,MAAM,UAAU,KAAI;UACjC,eAAe;UACf,cAAc;;AAEhB,kBAAU,KAAK,KAAK;AACpB,eAAO,UAAU,SAAS,EAAE,iBAAgB;MAC9C,CAAC;AAED,SAAG,uCAAuC,MAAK;AAC7C,uBAAe,kBAAkB,IAAI,YAAY,GAAG,MAAM,CAAC;AAC3D,uBAAe,YAAY,IAAI,YAAY,GAAG,EAAE,aAAa,EAAE,MAAM,CAAA,GAAI,YAAY,CAAA,GAAI,MAAM,CAAA,EAAE,EAAE,CAAS,CAAC;AAC7G,kBAAU,YAAY;AACtB,kBAAU,UAAS;AACnB,eAAO,eAAe,iBAAiB,EAAE,iBAAgB;AACzD,kBAAU,UAAS;AACnB,eAAO,eAAe,WAAW,EAAE,iBAAgB;MACrD,CAAC;IACH,CAAC;;;",
  "names": []
}
