{
  "version": 3,
  "sources": ["src/app/integration/settings.integration.spec.ts"],
  "sourcesContent": ["import { TestBed, fakeAsync, tick } from '@angular/core/testing';\r\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { SettingsPage } from '../features/settings/settings-page/settings-page';\r\nimport { AuthService } from '../shared/services/auth.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { By } from '@angular/platform-browser';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  template: `<app-settings-page></app-settings-page>`,\r\n  standalone: true,\r\n  imports: [SettingsPage]\r\n})\r\nclass TestHostComponent {}\r\n\r\ndescribe('Settings Integration', () => {\r\n  let httpMock: HttpTestingController;\r\n  let fixture: any;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        HttpClientTestingModule,\r\n        FormsModule,\r\n        CommonModule,\r\n        TestHostComponent\r\n      ],\r\n      providers: [AuthService]\r\n    }).compileComponents();\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    fixture = TestBed.createComponent(TestHostComponent);\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('should update and persist preferences', fakeAsync(() => {\r\n    // SettingsPage doesn't make initial HTTP requests, it loads from localStorage\r\n    // Simulate updating preferences\r\n    const settingsPage = fixture.debugElement.query(By.directive(SettingsPage)).componentInstance;\r\n    settingsPage.fontSize = 'large';\r\n    \r\n    // This will trigger saveAllPrefsToBackend() which calls updatePreferences()\r\n    settingsPage.saveProductivityPrefs();\r\n    \r\n    // Expect and flush the preferences update request\r\n    const putReq = httpMock.expectOne(req => req.url === `${environment.apiUrl}/user/preferences`);\r\n    expect(putReq.request.method).toBe('PUT');\r\n    putReq.flush({});\r\n    tick();\r\n    fixture.detectChanges();\r\n    expect(settingsPage.fontSize).toBe('large');\r\n  }));\r\n}); "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,IAAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,QAAM,oBAAN,MAAM,kBAAiB;;AAAjB,wBAAiB,WAAA;MALtB,UAAU;QACT,UAAU;QACV,YAAY;QACZ,SAAS,CAAC,YAAY;OACvB;OACK,iBAAiB;AAEvB,aAAS,wBAAwB,MAAK;AACpC,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;YACA;YACA;YACA;;UAEF,WAAW,CAAC,WAAW;SACxB,EAAE,kBAAiB;AACpB,mBAAW,QAAQ,OAAO,qBAAqB;AAC/C,kBAAU,QAAQ,gBAAgB,iBAAiB;AACnD,gBAAQ,cAAa;MACvB,EAAC;AAED,gBAAU,MAAK;AACb,iBAAS,OAAM;MACjB,CAAC;AAED,SAAG,yCAAyC,UAAU,MAAK;AAGzD,cAAM,eAAe,QAAQ,aAAa,MAAM,GAAG,UAAU,YAAY,CAAC,EAAE;AAC5E,qBAAa,WAAW;AAGxB,qBAAa,sBAAqB;AAGlC,cAAM,SAAS,SAAS,UAAU,SAAO,IAAI,QAAQ,GAAG,YAAY,MAAM,mBAAmB;AAC7F,eAAO,OAAO,QAAQ,MAAM,EAAE,KAAK,KAAK;AACxC,eAAO,MAAM,CAAA,CAAE;AACf,aAAI;AACJ,gBAAQ,cAAa;AACrB,eAAO,aAAa,QAAQ,EAAE,KAAK,OAAO;MAC5C,CAAC,CAAC;IACJ,CAAC;;;",
  "names": ["init_testing"]
}
