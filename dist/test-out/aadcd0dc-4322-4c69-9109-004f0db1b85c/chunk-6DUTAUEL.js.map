{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\features\\timer\\focus-timer\\focus-timer.html", "angular:jit:style:src\\app\\features\\timer\\focus-timer\\focus-timer.scss", "src/app/features/timer/focus-timer/focus-timer.ts"],
  "sourcesContent": ["<div class=\"focus-timer\">\r\n  <form class=\"settings\" (ngSubmit)=\"updateDurations()\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Work (min)</mat-label>\r\n      <input matInput type=\"number\" min=\"1\" [(ngModel)]=\"workDuration\" name=\"workDuration\" required />\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Break (min)</mat-label>\r\n      <input matInput type=\"number\" min=\"1\" [(ngModel)]=\"breakDuration\" name=\"breakDuration\" required />\r\n    </mat-form-field>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\">Set</button>\r\n  </form>\r\n\r\n  <div *ngIf=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n\r\n  <div class=\"timer-display\" [class.break]=\"!isWork\">\r\n    <span class=\"minutes\">{{ minutes }}</span>:<span class=\"seconds\">{{ seconds }}</span>\r\n    <div class=\"interval-label\">{{ isWork ? 'Work' : 'Break' }}</div>\r\n  </div>\r\n\r\n  <div class=\"controls\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"start()\" [disabled]=\"isRunning\">Start</button>\r\n    <button mat-raised-button color=\"accent\" (click)=\"pause()\" [disabled]=\"!isRunning\">Pause</button>\r\n    <button mat-raised-button color=\"warn\" (click)=\"reset()\">Reset</button>\r\n  </div>\r\n\r\n  <div class=\"stats\">\r\n    <div><mat-icon>check_circle</mat-icon> Focus Sessions: {{ completedFocusSessions }}</div>\r\n    <div><mat-icon>timer</mat-icon> Time worked: {{ (totalWorkSeconds / 60) | number:'1.0-0' }} min</div>\r\n  </div>\r\n</div>\r\n", "/* src/app/features/timer/focus-timer/focus-timer.scss */\n.focus-timer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n  max-width: 400px;\n  margin: 0 auto;\n}\n.settings {\n  display: flex;\n  gap: 1rem;\n  width: 100%;\n  justify-content: center;\n}\n.timer-display {\n  font-size: 3rem;\n  font-weight: 600;\n  color: #3f51b5;\n  background: #f5f5f5;\n  border-radius: 1rem;\n  padding: 1.5rem 2.5rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 220px;\n}\n.timer-display.break {\n  color: #43a047;\n}\n.interval-label {\n  font-size: 1.1rem;\n  margin-top: 0.5rem;\n  color: #888;\n}\n.controls {\n  display: flex;\n  gap: 1rem;\n}\n.stats {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  align-items: flex-start;\n  color: #555;\n  font-size: 1.1rem;\n}\n.stats mat-icon {\n  vertical-align: middle;\n  margin-right: 0.3rem;\n  color: #3f51b5;\n}\n@media (max-width: 600px) {\n  .focus-timer {\n    max-width: 100%;\n    padding: 0 1rem;\n  }\n  .timer-display {\n    min-width: 0;\n    padding: 1rem;\n    font-size: 2.2rem;\n  }\n  .settings {\n    flex-direction: column;\n    align-items: stretch;\n  }\n}\n/*# sourceMappingURL=focus-timer.css.map */\n", "import { Component, OnDestroy, Inject, PLATFORM_ID, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from '../../../shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-focus-timer',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule\r\n  ],\r\n  templateUrl: './focus-timer.html',\r\n  styleUrl: './focus-timer.scss',\r\n})\r\nexport class FocusTimer implements OnInit, OnDestroy {\r\n  workDuration = 25; // minutes\r\n  breakDuration = 5; // minutes\r\n  timeLeft = this.workDuration * 60; // seconds\r\n  isRunning = false;\r\n  isWork = true;\r\n  intervalId: ReturnType<typeof setInterval> | null = null;\r\n\r\n  completedFocusSessions = 0;\r\n  totalWorkSeconds = 0;\r\n  isBrowser: boolean;\r\n  isLoading = false;\r\n  private finishAudio: HTMLAudioElement | null = null;\r\n  errorMessage = '';\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object, \r\n    private cdr: ChangeDetectorRef,\r\n    private authService: AuthService\r\n  ) {\r\n    this.isBrowser = isPlatformBrowser(this.platformId);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.isBrowser) {\r\n      this.loadState();\r\n      this.finishAudio = new Audio('/timer-finish.mp3');\r\n      if ('Notification' in window && Notification.permission === 'default') {\r\n        Notification.requestPermission();\r\n      }\r\n    }\r\n  }\r\n\r\n  get minutes() {\r\n    return Math.floor(this.timeLeft / 60).toString().padStart(2, '0');\r\n  }\r\n  get seconds() {\r\n    return (this.timeLeft % 60).toString().padStart(2, '0');\r\n  }\r\n\r\n  start() {\r\n    if (this.isRunning) return;\r\n    this.isRunning = true;\r\n    this.intervalId = setInterval(() => {\r\n      if (this.timeLeft > 0) {\r\n        this.timeLeft--;\r\n        if (this.isWork) this.totalWorkSeconds++;\r\n      } else {\r\n        this.isRunning = false;\r\n        if (this.intervalId) clearInterval(this.intervalId);\r\n        this.notifyFinish();\r\n        if (this.isWork) {\r\n          this.completedFocusSessions++;\r\n          this.isWork = false;\r\n          this.timeLeft = this.breakDuration * 60;\r\n        } else {\r\n          this.isWork = true;\r\n          this.timeLeft = this.workDuration * 60;\r\n        }\r\n        this.saveState();\r\n        this.start(); // auto-start next interval\r\n      }\r\n      this.saveState();\r\n      this.cdr.markForCheck(); // Ensure UI updates\r\n    }, 1000);\r\n  }\r\n\r\n  pause() {\r\n    this.isRunning = false;\r\n    if (this.intervalId) clearInterval(this.intervalId);\r\n    this.saveState();\r\n  }\r\n\r\n  reset() {\r\n    this.isRunning = false;\r\n    if (this.intervalId) clearInterval(this.intervalId);\r\n    this.timeLeft = this.isWork ? this.workDuration * 60 : this.breakDuration * 60;\r\n    this.saveState();\r\n  }\r\n\r\n  updateDurations() {\r\n    if (this.isWork) {\r\n      this.timeLeft = this.workDuration * 60;\r\n    } else {\r\n      this.timeLeft = this.breakDuration * 60;\r\n    }\r\n    this.saveState();\r\n  }\r\n\r\n  saveState() {\r\n    if (!this.isBrowser) return;\r\n    \r\n    const state = {\r\n      workDuration: this.workDuration,\r\n      breakDuration: this.breakDuration,\r\n      timeLeft: this.timeLeft,\r\n      isRunning: this.isRunning,\r\n      isWork: this.isWork,\r\n      completedFocusSessions: this.completedFocusSessions,\r\n      totalWorkSeconds: this.totalWorkSeconds\r\n    };\r\n\r\n    this.authService.updateFocusTimer(state).subscribe({\r\n      next: () => {\r\n      },\r\n      error: () => {\r\n        // Fallback to localStorage if API fails\r\n        localStorage.setItem('focus-timer', JSON.stringify(state));\r\n      }\r\n    });\r\n  }\r\n\r\n  loadState() {\r\n    if (!this.isBrowser) return;\r\n    this.isLoading = true;\r\n    this.errorMessage = '';\r\n    this.authService.getUserData().subscribe({\r\n      next: (userData) => {\r\n        const s = userData.focusTimer || {};\r\n        this.workDuration = s.workDuration ?? 25;\r\n        this.breakDuration = s.breakDuration ?? 5;\r\n        this.timeLeft = s.timeLeft ?? this.workDuration * 60;\r\n        this.isRunning = false; // always start paused\r\n        this.isWork = s.isWork ?? true;\r\n        this.completedFocusSessions = s.completedFocusSessions ?? 0;\r\n        this.totalWorkSeconds = s.totalWorkSeconds ?? 0;\r\n        this.isLoading = false;\r\n        this.cdr.detectChanges();\r\n      },\r\n      error: () => {\r\n        // Fallback to localStorage\r\n        const data = localStorage.getItem('focus-timer');\r\n        if (data) {\r\n          try {\r\n            const s = JSON.parse(data);\r\n            this.workDuration = s.workDuration ?? 25;\r\n            this.breakDuration = s.breakDuration ?? 5;\r\n            this.timeLeft = s.timeLeft ?? this.workDuration * 60;\r\n            this.isRunning = false; // always start paused\r\n            this.isWork = s.isWork ?? true;\r\n            this.completedFocusSessions = s.completedFocusSessions ?? 0;\r\n            this.totalWorkSeconds = s.totalWorkSeconds ?? 0;\r\n          } catch {\r\n            // fallback to defaults if corrupted\r\n            this.workDuration = 25;\r\n            this.breakDuration = 5;\r\n            this.timeLeft = 25 * 60;\r\n            this.isRunning = false;\r\n            this.isWork = true;\r\n            this.completedFocusSessions = 0;\r\n            this.totalWorkSeconds = 0;\r\n            this.errorMessage = 'Could not load your timer state from API or local storage.';\r\n          }\r\n        } else {\r\n          this.workDuration = 25;\r\n          this.breakDuration = 5;\r\n          this.timeLeft = 25 * 60;\r\n          this.isRunning = false;\r\n          this.isWork = true;\r\n          this.completedFocusSessions = 0;\r\n          this.totalWorkSeconds = 0;\r\n          this.errorMessage = 'Could not load your timer state from API or local storage.';\r\n        }\r\n        this.isLoading = false;\r\n        this.cdr.detectChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.intervalId) clearInterval(this.intervalId);\r\n  }\r\n\r\n  private notifyFinish() {\r\n    if (this.finishAudio) {\r\n      let playCount = 0;\r\n      const maxPlays = 6;\r\n      const playSound = () => {\r\n        if (!this.finishAudio) return;\r\n        this.finishAudio.currentTime = 0;\r\n        this.finishAudio.play();\r\n        playCount++;\r\n        if (playCount < maxPlays) {\r\n          setTimeout(playSound, 400);\r\n        }\r\n      };\r\n      playSound();\r\n    }\r\n    if (this.isBrowser && 'Notification' in window && Notification.permission === 'granted') {\r\n      new Notification('Focus Timer', { body: this.isWork ? 'Work session finished!' : 'Break finished!' });\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["focus_timer_default", "init_focus_timer", "FocusTimer"]
}
