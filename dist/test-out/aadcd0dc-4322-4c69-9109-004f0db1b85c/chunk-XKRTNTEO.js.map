{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/drag-drop.mjs","angular:jit:template:src\\app\\features\\tasks\\kanban-board\\kanban-board.html","angular:jit:style:src\\app\\features\\tasks\\kanban-board\\kanban-board.scss","src/app/features/tasks/kanban-board/kanban-board.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, DOCUMENT, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { _ as _getEventTarget, a as _getShadowRoot } from './shadow-dom-B0oHn41l.mjs';\nimport { a as isFakeTouchstartFromScreenReader, i as isFakeMousedownFromScreenReader } from './fake-event-detection-DWOdFTFz.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-B2sGQXxD.mjs';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from './scrolling.mjs';\nexport { CdkScrollable as ɵɵCdkScrollable } from './scrolling.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { _ as _IdGenerator } from './id-generator-LuoRZSid.mjs';\nimport { c as coerceArray } from './array-I1yfCXUO.mjs';\nimport './platform-DNDzkVcI.mjs';\nimport '@angular/common';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Checks if the child element is overflowing from its parent.\n * @param parentRect - The bounding rect of the parent element.\n * @param childRect - The bounding rect of the child element.\n */\nfunction isOverflowingParent(parentRect, childRect) {\n    // check for horizontal overflow (left and right)\n    const isLeftOverflowing = childRect.left < parentRect.left;\n    const isRightOverflowing = childRect.left + childRect.width > parentRect.right;\n    // check for vertical overflow (top and bottom)\n    const isTopOverflowing = childRect.top < parentRect.top;\n    const isBottomOverflowing = childRect.top + childRect.height > parentRect.bottom;\n    return isLeftOverflowing || isRightOverflowing || isTopOverflowing || isBottomOverflowing;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            const renderer = this._renderer;\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                renderer.listen(element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                renderer.listen(element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                renderer.listen(element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        if (\n        // can be null if the drag item was never dragged.\n        this._boundaryElement &&\n            this._rootElement &&\n            // check if we are overflowing off our boundary element\n            isOverflowingParent(this._boundaryElement.getBoundingClientRect(), this._rootElement.getBoundingClientRect())) {\n            const parentRect = this._boundaryElement.getBoundingClientRect();\n            const childRect = this._rootElement.getBoundingClientRect();\n            let offsetX = 0;\n            let offsetY = 0;\n            // check if we are overflowing from left or right\n            if (childRect.left < parentRect.left) {\n                offsetX = parentRect.left - childRect.left;\n            }\n            else if (childRect.right > parentRect.right) {\n                offsetX = parentRect.right - childRect.right;\n            }\n            // check if we are overflowing from top or bottom\n            if (childRect.top < parentRect.top) {\n                offsetY = parentRect.top - childRect.top;\n            }\n            else if (childRect.bottom > parentRect.bottom) {\n                offsetY = parentRect.bottom - childRect.bottom;\n            }\n            const currentLeft = this._activeTransform.x;\n            const currentTop = this._activeTransform.y;\n            let x = currentLeft + offsetX, y = currentTop + offsetY;\n            this._rootElement.style.transform = getTransform(x, y);\n            this._activeTransform = { x, y };\n            this._passiveTransform = { x, y };\n        }\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = this._renderer.listen(shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    _scroll = new Subject();\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = this._renderer.listen(this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this._scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => this._renderer.listen(this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this._scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = this._renderer.listen(shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        this._dragRef.resetToBoundary();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Refs that have been synced with the drop ref most recently. */\n    _latestSortedRefs;\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        // Note that we reuse the last set of synced items, rather than re-sorting the whole\n        // list, because it can slow down re-renders of large lists (see #30737).\n        if (this._latestSortedRefs) {\n            const index = this._latestSortedRefs.indexOf(item._dragRef);\n            if (index > -1) {\n                this._latestSortedRefs.splice(index, 1);\n                this._syncItemsWithRef(this._latestSortedRefs);\n            }\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._latestSortedRefs = undefined;\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef(items) {\n        this._latestSortedRefs = items;\n        this._dropListRef.withItems(items);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n","<div class=\"kanban-board\">\r\n  <form class=\"add-task-form\" (ngSubmit)=\"addTask()\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <input matInput placeholder=\"Task title\" [(ngModel)]=\"newTaskTitle\" name=\"title\" required />\r\n    </mat-form-field>\r\n    <mat-form-field appearance=\"outline\">\r\n      <textarea matInput placeholder=\"Description (optional)\" [(ngModel)]=\"newTaskDescription\" name=\"description\"></textarea>\r\n    </mat-form-field>\r\n    <button mat-raised-button color=\"primary\" type=\"submit\">Add Task</button>\r\n  </form>\r\n\r\n  <div class=\"columns\">\r\n    <div class=\"column\">\r\n      <h3>To Do</h3>\r\n      <div cdkDropList #todoList=\"cdkDropList\" [cdkDropListData]=\"todo\" [cdkDropListConnectedTo]=\"[inProgressList, doneList]\" class=\"task-list\" (cdkDropListDropped)=\"drop($event)\">\r\n        <div *ngFor=\"let task of todo; let i = index\" cdkDrag class=\"task-card\">\r\n          <div class=\"task-title\">{{ task.title }}</div>\r\n          <div class=\"task-desc\" *ngIf=\"task.description\">{{ task.description }}</div>\r\n          <button mat-icon-button color=\"warn\" (click)=\"deleteTask(todo, i)\"><mat-icon>delete</mat-icon></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"column\">\r\n      <h3>In Progress</h3>\r\n      <div cdkDropList #inProgressList=\"cdkDropList\" [cdkDropListData]=\"inProgress\" [cdkDropListConnectedTo]=\"[todoList, doneList]\" class=\"task-list\" (cdkDropListDropped)=\"drop($event)\">\r\n        <div *ngFor=\"let task of inProgress; let i = index\" cdkDrag class=\"task-card\">\r\n          <div class=\"task-title\">{{ task.title }}</div>\r\n          <div class=\"task-desc\" *ngIf=\"task.description\">{{ task.description }}</div>\r\n          <button mat-icon-button color=\"warn\" (click)=\"deleteTask(inProgress, i)\"><mat-icon>delete</mat-icon></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"column\">\r\n      <h3>Done</h3>\r\n      <div cdkDropList #doneList=\"cdkDropList\" [cdkDropListData]=\"done\" [cdkDropListConnectedTo]=\"[todoList, inProgressList]\" class=\"task-list\" (cdkDropListDropped)=\"drop($event)\">\r\n        <div *ngFor=\"let task of done; let i = index\" cdkDrag class=\"task-card\">\r\n          <div class=\"task-title\">{{ task.title }}</div>\r\n          <div class=\"task-desc\" *ngIf=\"task.description\">{{ task.description }}</div>\r\n          <button mat-icon-button color=\"warn\" (click)=\"deleteTask(done, i)\"><mat-icon>delete</mat-icon></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","/* src/app/features/tasks/kanban-board/kanban-board.scss */\n.kanban-board {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n.add-task-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: stretch;\n}\n.columns {\n  display: flex;\n  gap: 2rem;\n  justify-content: space-between;\n}\n.column {\n  background: #fafafa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n  padding: 1rem;\n  flex: 1 1 0;\n  min-width: 260px;\n  max-width: 350px;\n  display: flex;\n  flex-direction: column;\n}\n.column h3 {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  font-weight: 600;\n  color: #3f51b5;\n}\n.task-list {\n  min-height: 60px;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n.task-card {\n  background: #fff;\n  border-radius: 6px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.07);\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  position: relative;\n  cursor: grab;\n  transition: box-shadow 0.2s;\n}\n.task-card:active {\n  cursor: grabbing;\n  box-shadow: 0 4px 12px rgba(63, 81, 181, 0.12);\n}\n.task-title {\n  font-weight: 500;\n  font-size: 1.1rem;\n  color: #222;\n}\n.task-desc {\n  color: #666;\n  font-size: 0.95rem;\n}\nbutton[mat-icon-button] {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n}\n@media (max-width: 900px) {\n  .columns {\n    flex-direction: column;\n    gap: 1.5rem;\n  }\n  .column {\n    max-width: 100%;\n  }\n}\n/*# sourceMappingURL=kanban-board.css.map */\n","import { Component, Inject, PLATFORM_ID, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem, DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { Task } from '../../../shared/models/task.model';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthService } from '../../../shared/services/auth.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-kanban-board',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormsModule\r\n  ],\r\n  templateUrl: './kanban-board.html',\r\n  styleUrl: './kanban-board.scss',\r\n})\r\nexport class KanbanBoard implements OnInit, OnDestroy {\r\n  todo: Task[] = [];\r\n  inProgress: Task[] = [];\r\n  done: Task[] = [];\r\n\r\n  newTaskTitle = '';\r\n  newTaskDescription = '';\r\n  isBrowser: boolean;\r\n  isLoading = false;\r\n  private authSub: Subscription | undefined;\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformId: Object,\r\n    private authService: AuthService,\r\n    private cdr: ChangeDetectorRef\r\n  ) {\r\n    this.isBrowser = isPlatformBrowser(this.platformId);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.isBrowser) {\r\n      this.loadTasks();\r\n      this.authSub = this.authService.isAuthenticated$.subscribe(isAuth => {\r\n        if (isAuth) {\r\n          this.loadTasks();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.authSub) {\r\n      this.authSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  drop(event: CdkDragDrop<Task[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(\r\n        event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex\r\n      );\r\n    }\r\n    this.saveTasks();\r\n  }\r\n\r\n  addTask() {\r\n    if (!this.newTaskTitle.trim()) return;\r\n    const newTask: Task = {\r\n      id: Date.now().toString(),\r\n      title: this.newTaskTitle,\r\n      description: this.newTaskDescription\r\n    };\r\n    this.todo.push(newTask);\r\n    this.newTaskTitle = '';\r\n    this.newTaskDescription = '';\r\n    this.saveTasks();\r\n  }\r\n\r\n  deleteTask(list: Task[], index: number) {\r\n    list.splice(index, 1);\r\n    this.saveTasks();\r\n  }\r\n\r\n  saveTasks() {\r\n    if (!this.isBrowser) return;\r\n    \r\n    const data = {\r\n      todo: this.todo,\r\n      inProgress: this.inProgress,\r\n      done: this.done\r\n    };\r\n\r\n    this.authService.updateKanbanTasks(data).subscribe({\r\n      next: () => {\r\n        // Fallback to localStorage if API fails\r\n        localStorage.setItem('kanban-tasks', JSON.stringify(data));\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to save tasks:', error);\r\n        // Fallback to localStorage if API fails\r\n        localStorage.setItem('kanban-tasks', JSON.stringify(data));\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTasks() {\r\n    if (!this.isBrowser) return;\r\n    \r\n    this.isLoading = true;\r\n    this.authService.getUserData().subscribe({\r\n      next: (userData) => {\r\n        this.todo = userData.kanbanTasks?.todo || [];\r\n        this.inProgress = userData.kanbanTasks?.inProgress || [];\r\n        this.done = userData.kanbanTasks?.done || [];\r\n        this.isLoading = false;\r\n        this.cdr.detectChanges();\r\n      },\r\n      error: (error) => {\r\n        console.error('Failed to load tasks from API:', error);\r\n        // Fallback to localStorage\r\n        const data = localStorage.getItem('kanban-tasks');\r\n        if (data) {\r\n          try {\r\n            const parsed = JSON.parse(data);\r\n            this.todo = parsed.todo || [];\r\n            this.inProgress = parsed.inProgress || [];\r\n            this.done = parsed.done || [];\r\n          } catch (e) {\r\n            this.todo = [];\r\n            this.inProgress = [];\r\n            this.done = [];\r\n            console.error('Failed to parse kanban-tasks:', e);\r\n          }\r\n        }\r\n        this.isLoading = false;\r\n        this.cdr.detectChanges();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","names":["importantProperties","item","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","isTouchEvent","kanban_board_default","init_kanban_board","KanbanBoard"],"x_google_ignoreList":[0]}